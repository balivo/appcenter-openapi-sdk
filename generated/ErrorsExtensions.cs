// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Errors.
    /// </summary>
    public static partial class ErrorsExtensions
    {
            /// <summary>
            /// Get session logs by error ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='date'>
            /// Date of data requested
            /// </param>
            public static GenericLogContainerDiagnostics ListSessionLogs(this IErrors operations, string errorId, string ownerName, string appName, System.DateTime? date = default(System.DateTime?))
            {
                return operations.ListSessionLogsAsync(errorId, ownerName, appName, date).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get session logs by error ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='date'>
            /// Date of data requested
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GenericLogContainerDiagnostics> ListSessionLogsAsync(this IErrors operations, string errorId, string ownerName, string appName, System.DateTime? date = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSessionLogsWithHttpMessagesAsync(errorId, ownerName, appName, date, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Error attachment text.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='attachmentId'>
            /// Error attachment id.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ErrorAttachmentText ErrorAttachmentTextMethod(this IErrors operations, string errorId, string attachmentId, string ownerName, string appName)
            {
                return operations.ErrorAttachmentTextMethodAsync(errorId, attachmentId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Error attachment text.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='attachmentId'>
            /// Error attachment id.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorAttachmentText> ErrorAttachmentTextMethodAsync(this IErrors operations, string errorId, string attachmentId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorAttachmentTextMethodWithHttpMessagesAsync(errorId, attachmentId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Error attachment location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='attachmentId'>
            /// Error attachment id.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ErrorAttachmentLocation ErrorAttachmentLocationMethod(this IErrors operations, string errorId, string attachmentId, string ownerName, string appName)
            {
                return operations.ErrorAttachmentLocationMethodAsync(errorId, attachmentId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Error attachment location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='attachmentId'>
            /// Error attachment id.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorAttachmentLocation> ErrorAttachmentLocationMethodAsync(this IErrors operations, string errorId, string attachmentId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorAttachmentLocationMethodWithHttpMessagesAsync(errorId, attachmentId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List error attachments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<ErrorAttachment> ErrorAttachments(this IErrors operations, string errorId, string ownerName, string appName)
            {
                return operations.ErrorAttachmentsAsync(errorId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List error attachments.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ErrorAttachment>> ErrorAttachmentsAsync(this IErrors operations, string errorId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorAttachmentsWithHttpMessagesAsync(errorId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates and updates the retention settings in days
            /// </summary>
            /// <remarks>
            /// Creates and updates the retention settings in days
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorRetentionInDays'>
            /// The amount of days to keep the crashes for this application.
            /// retention_in_days is an enum value, can only be 28 or 90.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ErrorRetentionSettings PutRetentionSettings(this IErrors operations, ErrorRetentionSettings errorRetentionInDays, string ownerName, string appName)
            {
                return operations.PutRetentionSettingsAsync(errorRetentionInDays, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates and updates the retention settings in days
            /// </summary>
            /// <remarks>
            /// Creates and updates the retention settings in days
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorRetentionInDays'>
            /// The amount of days to keep the crashes for this application.
            /// retention_in_days is an enum value, can only be 28 or 90.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorRetentionSettings> PutRetentionSettingsAsync(this IErrors operations, ErrorRetentionSettings errorRetentionInDays, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutRetentionSettingsWithHttpMessagesAsync(errorRetentionInDays, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// gets the retention settings in days
            /// </summary>
            /// <remarks>
            /// gets the retention settings in days
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ErrorRetentionSettings GetRetentionSettings(this IErrors operations, string ownerName, string appName)
            {
                return operations.GetRetentionSettingsAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// gets the retention settings in days
            /// </summary>
            /// <remarks>
            /// gets the retention settings in days
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorRetentionSettings> GetRetentionSettingsAsync(this IErrors operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRetentionSettingsWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Percentage of error-free device by day in the time range based on the
            /// selected versions. Api will return -1 if crash devices is greater than
            /// active devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static ErrorFreeDevicePercentages ErrorFreeDevicePercentagesMethod(this IErrors operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>))
            {
                return operations.ErrorFreeDevicePercentagesMethodAsync(start, ownerName, appName, end, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Percentage of error-free device by day in the time range based on the
            /// selected versions. Api will return -1 if crash devices is greater than
            /// active devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorFreeDevicePercentages> ErrorFreeDevicePercentagesMethodAsync(this IErrors operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorFreeDevicePercentagesMethodWithHttpMessagesAsync(start, ownerName, appName, end, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the stack trace for the error group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static DiagnosticsStackTrace GroupErrorStackTrace(this IErrors operations, string errorGroupId, string ownerName, string appName)
            {
                return operations.GroupErrorStackTraceAsync(errorGroupId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the stack trace for the error group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticsStackTrace> GroupErrorStackTraceAsync(this IErrors operations, string errorGroupId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GroupErrorStackTraceWithHttpMessagesAsync(errorGroupId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Top OSes of the selected error group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            public static ErrorGroupOperatingSystems GroupOperatingSystemCounts(this IErrors operations, string errorGroupId, string ownerName, string appName, long? top = 30)
            {
                return operations.GroupOperatingSystemCountsAsync(errorGroupId, ownerName, appName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Top OSes of the selected error group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorGroupOperatingSystems> GroupOperatingSystemCountsAsync(this IErrors operations, string errorGroupId, string ownerName, string appName, long? top = 30, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GroupOperatingSystemCountsWithHttpMessagesAsync(errorGroupId, ownerName, appName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Top models of the selected error group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            public static ErrorGroupModels GroupModelCounts(this IErrors operations, string errorGroupId, string ownerName, string appName, long? top = 30)
            {
                return operations.GroupModelCountsAsync(errorGroupId, ownerName, appName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Top models of the selected error group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorGroupModels> GroupModelCountsAsync(this IErrors operations, string errorGroupId, string ownerName, string appName, long? top = 30, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GroupModelCountsWithHttpMessagesAsync(errorGroupId, ownerName, appName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Error Stacktrace details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static DiagnosticsStackTrace ErrorStackTrace(this IErrors operations, string errorGroupId, string errorId, string ownerName, string appName)
            {
                return operations.ErrorStackTraceAsync(errorGroupId, errorId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Error Stacktrace details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticsStackTrace> ErrorStackTraceAsync(this IErrors operations, string errorGroupId, string errorId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorStackTraceWithHttpMessagesAsync(errorGroupId, errorId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Download details for a specific error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='format'>
            /// the format of the crash log. Possible values include: 'json', 'txt'
            /// </param>
            public static Stream ErrorDownload(this IErrors operations, string errorGroupId, string errorId, string ownerName, string appName, string format = default(string))
            {
                return operations.ErrorDownloadAsync(errorGroupId, errorId, ownerName, appName, format).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Download details for a specific error.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='format'>
            /// the format of the crash log. Possible values include: 'json', 'txt'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stream> ErrorDownloadAsync(this IErrors operations, string errorGroupId, string errorId, string ownerName, string appName, string format = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ErrorDownloadWithHttpMessagesAsync(errorGroupId, errorId, ownerName, appName, format, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Error details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static HandledErrorDetails ErrorDetailsMethod(this IErrors operations, string errorGroupId, string errorId, string ownerName, string appName)
            {
                return operations.ErrorDetailsMethodAsync(errorGroupId, errorId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Error details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='errorId'>
            /// The id of the error
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HandledErrorDetails> ErrorDetailsMethodAsync(this IErrors operations, string errorGroupId, string errorId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ErrorDetailsMethodWithHttpMessagesAsync(errorGroupId, errorId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Latest error details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static HandledErrorDetails LatestErrorDetails(this IErrors operations, string errorGroupId, string ownerName, string appName)
            {
                return operations.LatestErrorDetailsAsync(errorGroupId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Latest error details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HandledErrorDetails> LatestErrorDetailsAsync(this IErrors operations, string errorGroupId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LatestErrorDetailsWithHttpMessagesAsync(errorGroupId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all errors for group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='os'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            public static HandledErrors ListForGroup(this IErrors operations, string errorGroupId, System.DateTime start, string model, string os, string ownerName, string appName, System.DateTime? end = default(System.DateTime?))
            {
                return operations.ListForGroupAsync(errorGroupId, start, model, os, ownerName, appName, end).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all errors for group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='os'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HandledErrors> ListForGroupAsync(this IErrors operations, string errorGroupId, System.DateTime start, string model, string os, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForGroupWithHttpMessagesAsync(errorGroupId, start, model, os, ownerName, appName, end, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Percentage of error-free device by day in the time range. Api will return
            /// -1 if crash devices is greater than active devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            public static ErrorFreeDevicePercentages GroupErrorFreeDevicePercentages(this IErrors operations, string errorGroupId, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?))
            {
                return operations.GroupErrorFreeDevicePercentagesAsync(errorGroupId, start, ownerName, appName, end).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Percentage of error-free device by day in the time range. Api will return
            /// -1 if crash devices is greater than active devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorFreeDevicePercentages> GroupErrorFreeDevicePercentagesAsync(this IErrors operations, string errorGroupId, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GroupErrorFreeDevicePercentagesWithHttpMessagesAsync(errorGroupId, start, ownerName, appName, end, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of errors by day in the time range of the selected error group with
            /// selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            public static ErrorCounts GroupCountsPerDay(this IErrors operations, string errorGroupId, System.DateTime start, string ownerName, string appName, string version = default(string), System.DateTime? end = default(System.DateTime?))
            {
                return operations.GroupCountsPerDayAsync(errorGroupId, start, ownerName, appName, version, end).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of errors by day in the time range of the selected error group with
            /// selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorCounts> GroupCountsPerDayAsync(this IErrors operations, string errorGroupId, System.DateTime start, string ownerName, string appName, string version = default(string), System.DateTime? end = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GroupCountsPerDayWithHttpMessagesAsync(errorGroupId, start, ownerName, appName, version, end, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Error group details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ErrorGroup GroupDetails(this IErrors operations, string errorGroupId, string ownerName, string appName)
            {
                return operations.GroupDetailsAsync(errorGroupId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Error group details
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorGroup> GroupDetailsAsync(this IErrors operations, string errorGroupId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GroupDetailsWithHttpMessagesAsync(errorGroupId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update error state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='errorGroupState'>
            /// The state of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ErrorGroup UpdateState(this IErrors operations, string errorGroupId, ErrorGroupState errorGroupState, string ownerName, string appName)
            {
                return operations.UpdateStateAsync(errorGroupId, errorGroupState, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update error state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='errorGroupId'>
            /// The id of the error group
            /// </param>
            /// <param name='errorGroupState'>
            /// The state of the error group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorGroup> UpdateStateAsync(this IErrors operations, string errorGroupId, ErrorGroupState errorGroupState, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateStateWithHttpMessagesAsync(errorGroupId, errorGroupState, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of error groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='groupState'>
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='orderby'>
            /// controls the sorting order and sorting based on which column
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            public static ErrorGroups GroupList(this IErrors operations, System.DateTime start, string ownerName, string appName, string version = default(string), string groupState = default(string), System.DateTime? end = default(System.DateTime?), string orderby = "count desc", long? top = 30)
            {
                return operations.GroupListAsync(start, ownerName, appName, version, groupState, end, orderby, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of error groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='groupState'>
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='orderby'>
            /// controls the sorting order and sorting based on which column
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorGroups> GroupListAsync(this IErrors operations, System.DateTime start, string ownerName, string appName, string version = default(string), string groupState = default(string), System.DateTime? end = default(System.DateTime?), string orderby = "count desc", long? top = 30, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GroupListWithHttpMessagesAsync(start, ownerName, appName, version, groupState, end, orderby, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of errors by day in the time range based the selected versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            public static ErrorCounts CountsPerDay(this IErrors operations, System.DateTime start, string ownerName, string appName, string version = default(string), System.DateTime? end = default(System.DateTime?))
            {
                return operations.CountsPerDayAsync(start, ownerName, appName, version, end).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of errors by day in the time range based the selected versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorCounts> CountsPerDayAsync(this IErrors operations, System.DateTime start, string ownerName, string appName, string version = default(string), System.DateTime? end = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CountsPerDayWithHttpMessagesAsync(start, ownerName, appName, version, end, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
