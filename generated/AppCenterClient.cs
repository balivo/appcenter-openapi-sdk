// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// Microsoft Visual Studio App Center API
    /// </summary>
    public partial class AppCenterClient : ServiceClient<AppCenterClient>, IAppCenterClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the IDevices.
        /// </summary>
        public virtual IDevices Devices { get; private set; }

        /// <summary>
        /// Gets the INotifications.
        /// </summary>
        public virtual INotifications Notifications { get; private set; }

        /// <summary>
        /// Gets the IOrgInvitations.
        /// </summary>
        public virtual IOrgInvitations OrgInvitations { get; private set; }

        /// <summary>
        /// Gets the IDistributionGroupInvitations.
        /// </summary>
        public virtual IDistributionGroupInvitations DistributionGroupInvitations { get; private set; }

        /// <summary>
        /// Gets the IAppInvitations.
        /// </summary>
        public virtual IAppInvitations AppInvitations { get; private set; }

        /// <summary>
        /// Gets the ISharedconnection.
        /// </summary>
        public virtual ISharedconnection Sharedconnection { get; private set; }

        /// <summary>
        /// Gets the IDataSubjectRight.
        /// </summary>
        public virtual IDataSubjectRight DataSubjectRight { get; private set; }

        /// <summary>
        /// Gets the IUsers.
        /// </summary>
        public virtual IUsers Users { get; private set; }

        /// <summary>
        /// Gets the IReleases.
        /// </summary>
        public virtual IReleases Releases { get; private set; }

        /// <summary>
        /// Gets the IBuilds.
        /// </summary>
        public virtual IBuilds Builds { get; private set; }

        /// <summary>
        /// Gets the ICodePushAcquisition.
        /// </summary>
        public virtual ICodePushAcquisition CodePushAcquisition { get; private set; }

        /// <summary>
        /// Gets the IDistibutionReleases.
        /// </summary>
        public virtual IDistibutionReleases DistibutionReleases { get; private set; }

        /// <summary>
        /// Gets the IDistributionGroups.
        /// </summary>
        public virtual IDistributionGroups DistributionGroups { get; private set; }

        /// <summary>
        /// Gets the ITeams.
        /// </summary>
        public virtual ITeams Teams { get; private set; }

        /// <summary>
        /// Gets the IAzureSubscription.
        /// </summary>
        public virtual IAzureSubscription AzureSubscription { get; private set; }

        /// <summary>
        /// Gets the IOrganization.
        /// </summary>
        public virtual IOrganization Organization { get; private set; }

        /// <summary>
        /// Gets the IApps.
        /// </summary>
        public virtual IApps Apps { get; private set; }

        /// <summary>
        /// Gets the IOrganizations.
        /// </summary>
        public virtual IOrganizations Organizations { get; private set; }

        /// <summary>
        /// Gets the IInvitations.
        /// </summary>
        public virtual IInvitations Invitations { get; private set; }

        /// <summary>
        /// Gets the INpsSurvey.
        /// </summary>
        public virtual INpsSurvey NpsSurvey { get; private set; }

        /// <summary>
        /// Gets the IHappinessSurvey.
        /// </summary>
        public virtual IHappinessSurvey HappinessSurvey { get; private set; }

        /// <summary>
        /// Gets the IWebhooks.
        /// </summary>
        public virtual IWebhooks Webhooks { get; private set; }

        /// <summary>
        /// Gets the ICrashes.
        /// </summary>
        public virtual ICrashes Crashes { get; private set; }

        /// <summary>
        /// Gets the ITest.
        /// </summary>
        public virtual ITest Test { get; private set; }

        /// <summary>
        /// Gets the ISymbols.
        /// </summary>
        public virtual ISymbols Symbols { get; private set; }

        /// <summary>
        /// Gets the ISymbolUploads.
        /// </summary>
        public virtual ISymbolUploads SymbolUploads { get; private set; }

        /// <summary>
        /// Gets the IMissingSymbolGroups.
        /// </summary>
        public virtual IMissingSymbolGroups MissingSymbolGroups { get; private set; }

        /// <summary>
        /// Gets the IRepositories.
        /// </summary>
        public virtual IRepositories Repositories { get; private set; }

        /// <summary>
        /// Gets the IRepositoryConfigurations.
        /// </summary>
        public virtual IRepositoryConfigurations RepositoryConfigurations { get; private set; }

        /// <summary>
        /// Gets the IProvisioning.
        /// </summary>
        public virtual IProvisioning Provisioning { get; private set; }

        /// <summary>
        /// Gets the IReleaseUploads.
        /// </summary>
        public virtual IReleaseUploads ReleaseUploads { get; private set; }

        /// <summary>
        /// Gets the IPush.
        /// </summary>
        public virtual IPush Push { get; private set; }

        /// <summary>
        /// Gets the IFileAssets.
        /// </summary>
        public virtual IFileAssets FileAssets { get; private set; }

        /// <summary>
        /// Gets the IExportConfigurations.
        /// </summary>
        public virtual IExportConfigurations ExportConfigurations { get; private set; }

        /// <summary>
        /// Gets the IErrors.
        /// </summary>
        public virtual IErrors Errors { get; private set; }

        /// <summary>
        /// Gets the IStoreReleases.
        /// </summary>
        public virtual IStoreReleases StoreReleases { get; private set; }

        /// <summary>
        /// Gets the IStores.
        /// </summary>
        public virtual IStores Stores { get; private set; }

        /// <summary>
        /// Gets the IApp.
        /// </summary>
        public virtual IApp App { get; private set; }

        /// <summary>
        /// Gets the ICodePushDeploymentRelease.
        /// </summary>
        public virtual ICodePushDeploymentRelease CodePushDeploymentRelease { get; private set; }

        /// <summary>
        /// Gets the IDeploymentReleases.
        /// </summary>
        public virtual IDeploymentReleases DeploymentReleases { get; private set; }

        /// <summary>
        /// Gets the ICodePushDeploymentReleases.
        /// </summary>
        public virtual ICodePushDeploymentReleases CodePushDeploymentReleases { get; private set; }

        /// <summary>
        /// Gets the ICodePushDeployments.
        /// </summary>
        public virtual ICodePushDeployments CodePushDeployments { get; private set; }

        /// <summary>
        /// Gets the ICodePushDeploymentMetrics.
        /// </summary>
        public virtual ICodePushDeploymentMetrics CodePushDeploymentMetrics { get; private set; }

        /// <summary>
        /// Gets the ICrashGroups.
        /// </summary>
        public virtual ICrashGroups CrashGroups { get; private set; }

        /// <summary>
        /// Gets the ICommits.
        /// </summary>
        public virtual ICommits Commits { get; private set; }

        /// <summary>
        /// Gets the IBugTracker.
        /// </summary>
        public virtual IBugTracker BugTracker { get; private set; }

        /// <summary>
        /// Gets the IBranchConfigurations.
        /// </summary>
        public virtual IBranchConfigurations BranchConfigurations { get; private set; }

        /// <summary>
        /// Gets the IAppleMapping.
        /// </summary>
        public virtual IAppleMapping AppleMapping { get; private set; }

        /// <summary>
        /// Gets the IAnalytics.
        /// </summary>
        public virtual IAnalytics Analytics { get; private set; }

        /// <summary>
        /// Gets the IApiTokens.
        /// </summary>
        public virtual IApiTokens ApiTokens { get; private set; }

        /// <summary>
        /// Initializes a new instance of the AppCenterClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AppCenterClient.Dispose(). False: will not dispose provided httpClient</param>
        protected AppCenterClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AppCenterClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected AppCenterClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AppCenterClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected AppCenterClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the AppCenterClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected AppCenterClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AppCenterClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected AppCenterClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the AppCenterClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AppCenterClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AppCenterClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AppCenterClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AppCenterClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AppCenterClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AppCenterClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AppCenterClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AppCenterClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the AppCenterClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AppCenterClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Devices = new Devices(this);
            Notifications = new Notifications(this);
            OrgInvitations = new OrgInvitations(this);
            DistributionGroupInvitations = new DistributionGroupInvitations(this);
            AppInvitations = new AppInvitations(this);
            Sharedconnection = new Sharedconnection(this);
            DataSubjectRight = new DataSubjectRight(this);
            Users = new Users(this);
            Releases = new Releases(this);
            Builds = new Builds(this);
            CodePushAcquisition = new CodePushAcquisition(this);
            DistibutionReleases = new DistibutionReleases(this);
            DistributionGroups = new DistributionGroups(this);
            Teams = new Teams(this);
            AzureSubscription = new AzureSubscription(this);
            Organization = new Organization(this);
            Apps = new Apps(this);
            Organizations = new Organizations(this);
            Invitations = new Invitations(this);
            NpsSurvey = new NpsSurvey(this);
            HappinessSurvey = new HappinessSurvey(this);
            Webhooks = new Webhooks(this);
            Crashes = new Crashes(this);
            Test = new Test(this);
            Symbols = new Symbols(this);
            SymbolUploads = new SymbolUploads(this);
            MissingSymbolGroups = new MissingSymbolGroups(this);
            Repositories = new Repositories(this);
            RepositoryConfigurations = new RepositoryConfigurations(this);
            Provisioning = new Provisioning(this);
            ReleaseUploads = new ReleaseUploads(this);
            Push = new Push(this);
            FileAssets = new FileAssets(this);
            ExportConfigurations = new ExportConfigurations(this);
            Errors = new Errors(this);
            StoreReleases = new StoreReleases(this);
            Stores = new Stores(this);
            App = new App(this);
            CodePushDeploymentRelease = new CodePushDeploymentRelease(this);
            DeploymentReleases = new DeploymentReleases(this);
            CodePushDeploymentReleases = new CodePushDeploymentReleases(this);
            CodePushDeployments = new CodePushDeployments(this);
            CodePushDeploymentMetrics = new CodePushDeploymentMetrics(this);
            CrashGroups = new CrashGroups(this);
            Commits = new Commits(this);
            BugTracker = new BugTracker(this);
            BranchConfigurations = new BranchConfigurations(this);
            AppleMapping = new AppleMapping(this);
            Analytics = new Analytics(this);
            ApiTokens = new ApiTokens(this);
            BaseUri = new System.Uri("https://api.appcenter.ms");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<SharedConnectionRequest>("serviceType"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<SharedConnectionRequest>("serviceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<SharedConnectionResponse>("serviceType"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<SharedConnectionResponse>("serviceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<PrivateSharedConnectionResponse>("serviceType"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<PrivateSharedConnectionResponse>("serviceType"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<Log>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<Log>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<CustomProperty>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<CustomProperty>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<LogFlowLog>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<LogFlowLog>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<LogFlowCustomProperty>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<LogFlowCustomProperty>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<LogDiagnostics>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<LogDiagnostics>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<CustomPropertyDiagnostics>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<CustomPropertyDiagnostics>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<ExportConfiguration>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<ExportConfiguration>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<NotificationTarget>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<NotificationTarget>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<NotificationConfig>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<NotificationConfig>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<NotificationConfigResult>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<NotificationConfigResult>("type"));
            SerializationSettings.Converters.Add(new PolymorphicSerializeJsonConverter<AlertingBugtrackerSettings>("type"));
            DeserializationSettings.Converters.Add(new  PolymorphicDeserializeJsonConverter<AlertingBugtrackerSettings>("type"));
            CustomInitialize();
        }
    }
}
