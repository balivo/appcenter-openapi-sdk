// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Analytics.
    /// </summary>
    public static partial class AnalyticsExtensions
    {
            /// <summary>
            /// Count of active versions in the time range ordered by version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static Versions VersionsMethod(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? top = 30, IList<string> versions = default(IList<string>))
            {
                return operations.VersionsMethodAsync(start, ownerName, appName, end, top, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of active versions in the time range ordered by version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Versions> VersionsMethodAsync(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? top = 30, IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VersionsMethodWithHttpMessagesAsync(start, ownerName, appName, end, top, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of sessions per device in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='interval'>
            /// Size of interval in ISO 8601 duration format.
            /// (PnYnMnDTnHnMnS|PnW|P&lt;date&gt;T&lt;time&gt;). The valid durations are 1
            /// day (P1D), 1 week (P1W), and 30 days (P30D).
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static SessionsPerDevice PerDeviceCounts(this IAnalytics operations, System.DateTime start, string interval, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>))
            {
                return operations.PerDeviceCountsAsync(start, interval, ownerName, appName, end, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of sessions per device in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='interval'>
            /// Size of interval in ISO 8601 duration format.
            /// (PnYnMnDTnHnMnS|PnW|P&lt;date&gt;T&lt;time&gt;). The valid durations are 1
            /// day (P1D), 1 week (P1W), and 30 days (P30D).
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SessionsPerDevice> PerDeviceCountsAsync(this IAnalytics operations, System.DateTime start, string interval, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PerDeviceCountsWithHttpMessagesAsync(start, interval, ownerName, appName, end, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets session duration .
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static SessionDurationsDistribution SessionDurationsDistributionMethod(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>))
            {
                return operations.SessionDurationsDistributionMethodAsync(start, ownerName, appName, end, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets session duration .
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SessionDurationsDistribution> SessionDurationsDistributionMethodAsync(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SessionDurationsDistributionMethodWithHttpMessagesAsync(start, ownerName, appName, end, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of sessions in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='interval'>
            /// Size of interval in ISO 8601 duration format.
            /// (PnYnMnDTnHnMnS|PnW|P&lt;date&gt;T&lt;time&gt;). The valid durations are 1
            /// day (P1D), 1 week (P1W), and 30 days (P30D).
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static IList<DateTimeCounts> SessionCounts(this IAnalytics operations, System.DateTime start, string interval, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>))
            {
                return operations.SessionCountsAsync(start, interval, ownerName, appName, end, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of sessions in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='interval'>
            /// Size of interval in ISO 8601 duration format.
            /// (PnYnMnDTnHnMnS|PnW|P&lt;date&gt;T&lt;time&gt;). The valid durations are 1
            /// day (P1D), 1 week (P1W), and 30 days (P30D).
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DateTimeCounts>> SessionCountsAsync(this IAnalytics operations, System.DateTime start, string interval, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SessionCountsWithHttpMessagesAsync(start, interval, ownerName, appName, end, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Places in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static Places PlaceCounts(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? top = 30, IList<string> versions = default(IList<string>))
            {
                return operations.PlaceCountsAsync(start, ownerName, appName, end, top, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Places in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Places> PlaceCountsAsync(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? top = 30, IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PlaceCountsWithHttpMessagesAsync(start, ownerName, appName, end, top, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// OSes in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static OSes OperatingSystemCounts(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? top = 30, IList<string> versions = default(IList<string>))
            {
                return operations.OperatingSystemCountsAsync(start, ownerName, appName, end, top, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// OSes in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OSes> OperatingSystemCountsAsync(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? top = 30, IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OperatingSystemCountsWithHttpMessagesAsync(start, ownerName, appName, end, top, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// models in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static AnalyticsModels ModelCounts(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? top = 30, IList<string> versions = default(IList<string>))
            {
                return operations.ModelCountsAsync(start, ownerName, appName, end, top, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// models in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyticsModels> ModelCountsAsync(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? top = 30, IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ModelCountsWithHttpMessagesAsync(start, ownerName, appName, end, top, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Logs received between the specified start time and the current time. The
            /// API will return a maximum of 100 logs per call.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format. It must be within the
            /// current day in the UTC timezone. The default value is the start time of the
            /// current day in UTC timezone.
            /// </param>
            public static LogFlowLogContainer LogFlow(this IAnalytics operations, string ownerName, string appName, System.DateTime? start = default(System.DateTime?))
            {
                return operations.LogFlowAsync(ownerName, appName, start).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Logs received between the specified start time and the current time. The
            /// API will return a maximum of 100 logs per call.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format. It must be within the
            /// current day in the UTC timezone. The default value is the start time of the
            /// current day in UTC timezone.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogFlowLogContainer> LogFlowAsync(this IAnalytics operations, string ownerName, string appName, System.DateTime? start = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LogFlowWithHttpMessagesAsync(ownerName, appName, start, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// languages in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static Languages LanguageCounts(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? top = 30, IList<string> versions = default(IList<string>))
            {
                return operations.LanguageCountsAsync(start, ownerName, appName, end, top, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// languages in the time range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Languages> LanguageCountsAsync(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), long? top = 30, IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LanguageCountsWithHttpMessagesAsync(start, ownerName, appName, end, top, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Logs received between the specified start time and the current time. The
            /// API will return a maximum of 100 logs per call.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format. It must be within the
            /// current day in the UTC timezone. The default value is the start time of the
            /// current day in UTC timezone.
            /// </param>
            public static LogFlowGenericLogContainer GenericLogFlow(this IAnalytics operations, string ownerName, string appName, System.DateTime? start = default(System.DateTime?))
            {
                return operations.GenericLogFlowAsync(ownerName, appName, start).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Logs received between the specified start time and the current time. The
            /// API will return a maximum of 100 logs per call.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format. It must be within the
            /// current day in the UTC timezone. The default value is the start time of the
            /// current day in UTC timezone.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LogFlowGenericLogContainer> GenericLogFlowAsync(this IAnalytics operations, string ownerName, string appName, System.DateTime? start = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenericLogFlowWithHttpMessagesAsync(ownerName, appName, start, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Event properties value counts during the time range in descending order.
            /// Limited up to 5 values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='eventPropertyName'>
            /// The id of the event property
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='top'>
            /// The number of property values to return
            /// </param>
            public static EventPropertyValues EventPropertyCounts(this IAnalytics operations, string eventName, string eventPropertyName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), long? top = 5)
            {
                return operations.EventPropertyCountsAsync(eventName, eventPropertyName, start, ownerName, appName, end, versions, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Event properties value counts during the time range in descending order.
            /// Limited up to 5 values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='eventPropertyName'>
            /// The id of the event property
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='top'>
            /// The number of property values to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventPropertyValues> EventPropertyCountsAsync(this IAnalytics operations, string eventName, string eventPropertyName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), long? top = 5, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventPropertyCountsWithHttpMessagesAsync(eventName, eventPropertyName, start, ownerName, appName, end, versions, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Event properties.  Up to the first 5 received properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static EventProperties EventPropertiesMethod(this IAnalytics operations, string eventName, string ownerName, string appName)
            {
                return operations.EventPropertiesMethodAsync(eventName, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Event properties.  Up to the first 5 received properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventProperties> EventPropertiesMethodAsync(this IAnalytics operations, string eventName, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventPropertiesMethodWithHttpMessagesAsync(eventName, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of events by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static EventCount EventCountMethod(this IAnalytics operations, string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>))
            {
                return operations.EventCountMethodAsync(eventName, start, ownerName, appName, end, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of events by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventCount> EventCountMethodAsync(this IAnalytics operations, string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventCountMethodWithHttpMessagesAsync(eventName, start, ownerName, appName, end, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of devices for an event by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static EventDeviceCount EventDeviceCountMethod(this IAnalytics operations, string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>))
            {
                return operations.EventDeviceCountMethodAsync(eventName, start, ownerName, appName, end, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of devices for an event by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventDeviceCount> EventDeviceCountMethodAsync(this IAnalytics operations, string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventDeviceCountMethodWithHttpMessagesAsync(eventName, start, ownerName, appName, end, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of events per session by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static EventCountPerSession EventPerSessionCount(this IAnalytics operations, string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>))
            {
                return operations.EventPerSessionCountAsync(eventName, start, ownerName, appName, end, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of events per session by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventCountPerSession> EventPerSessionCountAsync(this IAnalytics operations, string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventPerSessionCountWithHttpMessagesAsync(eventName, start, ownerName, appName, end, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of events per device by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static EventCountPerDevice EventPerDeviceCount(this IAnalytics operations, string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>))
            {
                return operations.EventPerDeviceCountAsync(eventName, start, ownerName, appName, end, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of events per device by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventCountPerDevice> EventPerDeviceCountAsync(this IAnalytics operations, string eventName, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventPerDeviceCountWithHttpMessagesAsync(eventName, start, ownerName, appName, end, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the set of Events with the specified event names
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void EventsDelete(this IAnalytics operations, string eventName, string ownerName, string appName)
            {
                operations.EventsDeleteAsync(eventName, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the set of Events with the specified event names
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EventsDeleteAsync(this IAnalytics operations, string eventName, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.EventsDeleteWithHttpMessagesAsync(eventName, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Count of active events in the time range ordered by event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='eventName'>
            /// to select the specific events
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='skip'>
            /// The offset (starting at 0) of the first result to return. This parameter
            /// along with limit is used to perform pagination.
            /// </param>
            /// <param name='inlinecount'>
            /// Controls whether or not to include a count of all the items across all
            /// pages. Possible values include: 'allpages', 'none'
            /// </param>
            /// <param name='orderby'>
            /// controls the sorting order and sorting based on which column
            /// </param>
            public static Events EventsMethod(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), IList<string> eventName = default(IList<string>), long? top = 30, long? skip = 0, string inlinecount = default(string), string orderby = "count desc")
            {
                return operations.EventsMethodAsync(start, ownerName, appName, end, versions, eventName, top, skip, inlinecount, orderby).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of active events in the time range ordered by event.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='eventName'>
            /// to select the specific events
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='skip'>
            /// The offset (starting at 0) of the first result to return. This parameter
            /// along with limit is used to perform pagination.
            /// </param>
            /// <param name='inlinecount'>
            /// Controls whether or not to include a count of all the items across all
            /// pages. Possible values include: 'allpages', 'none'
            /// </param>
            /// <param name='orderby'>
            /// controls the sorting order and sorting based on which column
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Events> EventsMethodAsync(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), IList<string> eventName = default(IList<string>), long? top = 30, long? skip = 0, string inlinecount = default(string), string orderby = "count desc", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EventsMethodWithHttpMessagesAsync(start, ownerName, appName, end, versions, eventName, top, skip, inlinecount, orderby, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the set of Events with the specified event names
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void EventsDeleteLogs(this IAnalytics operations, string eventName, string ownerName, string appName)
            {
                operations.EventsDeleteLogsAsync(eventName, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the set of Events with the specified event names
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eventName'>
            /// The id of the event
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EventsDeleteLogsAsync(this IAnalytics operations, string eventName, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.EventsDeleteLogsWithHttpMessagesAsync(eventName, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Count of total downloads for the provided distribution releases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releases'>
            /// The releases to retrieve.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ReleaseCounts DistributionReleaseCounts(this IAnalytics operations, GetReleasesContainer releases, string ownerName, string appName)
            {
                return operations.DistributionReleaseCountsAsync(releases, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of total downloads for the provided distribution releases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releases'>
            /// The releases to retrieve.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReleaseCounts> DistributionReleaseCountsAsync(this IAnalytics operations, GetReleasesContainer releases, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DistributionReleaseCountsWithHttpMessagesAsync(releases, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Percentage of crash-free device by day in the time range based on the
            /// selected versions. Api will return -1 if crash devices is greater than
            /// active devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            public static CrashFreeDevicePercentages CrashFreeDevicePercentagesMethod(this IAnalytics operations, System.DateTime start, string version, string ownerName, string appName, System.DateTime? end = default(System.DateTime?))
            {
                return operations.CrashFreeDevicePercentagesMethodAsync(start, version, ownerName, appName, end).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Percentage of crash-free device by day in the time range based on the
            /// selected versions. Api will return -1 if crash devices is greater than
            /// active devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashFreeDevicePercentages> CrashFreeDevicePercentagesMethodAsync(this IAnalytics operations, System.DateTime start, string version, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashFreeDevicePercentagesMethodWithHttpMessagesAsync(start, version, ownerName, appName, end, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Overall crashes and affected users count of the selected crash group with
            /// selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static CrashOverall CrashGroupTotals(this IAnalytics operations, string crashGroupId, string version, string ownerName, string appName)
            {
                return operations.CrashGroupTotalsAsync(crashGroupId, version, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Overall crashes and affected users count of the selected crash group with
            /// selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashOverall> CrashGroupTotalsAsync(this IAnalytics operations, string crashGroupId, string version, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashGroupTotalsWithHttpMessagesAsync(crashGroupId, version, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// top OSes of the selected crash group with selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            public static CrashGroupOperatingSystems CrashGroupOperatingSystemCounts(this IAnalytics operations, string crashGroupId, string version, string ownerName, string appName, long? top = 30)
            {
                return operations.CrashGroupOperatingSystemCountsAsync(crashGroupId, version, ownerName, appName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// top OSes of the selected crash group with selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashGroupOperatingSystems> CrashGroupOperatingSystemCountsAsync(this IAnalytics operations, string crashGroupId, string version, string ownerName, string appName, long? top = 30, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashGroupOperatingSystemCountsWithHttpMessagesAsync(crashGroupId, version, ownerName, appName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// top models of the selected crash group with selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            public static CrashGroupModels CrashGroupModelCounts(this IAnalytics operations, string crashGroupId, string version, string ownerName, string appName, long? top = 30)
            {
                return operations.CrashGroupModelCountsAsync(crashGroupId, version, ownerName, appName, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// top models of the selected crash group with selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashGroupModels> CrashGroupModelCountsAsync(this IAnalytics operations, string crashGroupId, string version, string ownerName, string appName, long? top = 30, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashGroupModelCountsWithHttpMessagesAsync(crashGroupId, version, ownerName, appName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of crashes by day in the time range of the selected crash group with
            /// selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            public static CrashCounts CrashGroupCounts(this IAnalytics operations, string crashGroupId, string version, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?))
            {
                return operations.CrashGroupCountsAsync(crashGroupId, version, start, ownerName, appName, end).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of crashes by day in the time range of the selected crash group with
            /// selected version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// The id of the crash group
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashCounts> CrashGroupCountsAsync(this IAnalytics operations, string crashGroupId, string version, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashGroupCountsWithHttpMessagesAsync(crashGroupId, version, start, ownerName, appName, end, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Overall crashes and affected users count of the selected crash groups with
            /// selected versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroups'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<CrashesOverallItem> CrashGroupsTotals(this IAnalytics operations, CrashGroupContainer crashGroups, string ownerName, string appName)
            {
                return operations.CrashGroupsTotalsAsync(crashGroups, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Overall crashes and affected users count of the selected crash groups with
            /// selected versions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroups'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CrashesOverallItem>> CrashGroupsTotalsAsync(this IAnalytics operations, CrashGroupContainer crashGroups, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashGroupsTotalsWithHttpMessagesAsync(crashGroups, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of crashes by day in the time range based the selected versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static CrashCounts CrashCountsMethod(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>))
            {
                return operations.CrashCountsMethodAsync(start, ownerName, appName, end, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of crashes by day in the time range based the selected versions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashCounts> CrashCountsMethodAsync(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CrashCountsMethodWithHttpMessagesAsync(start, ownerName, appName, end, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns whether audience definition exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='audienceName'>
            /// The name of the audience
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void AudienceNameExists(this IAnalytics operations, string audienceName, string ownerName, string appName)
            {
                operations.AudienceNameExistsAsync(audienceName, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns whether audience definition exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='audienceName'>
            /// The name of the audience
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AudienceNameExistsAsync(this IAnalytics operations, string audienceName, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AudienceNameExistsWithHttpMessagesAsync(audienceName, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes audience definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='audienceName'>
            /// The name of the audience
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void DeleteAudience(this IAnalytics operations, string audienceName, string ownerName, string appName)
            {
                operations.DeleteAudienceAsync(audienceName, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes audience definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='audienceName'>
            /// The name of the audience
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAudienceAsync(this IAnalytics operations, string audienceName, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAudienceWithHttpMessagesAsync(audienceName, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets audience definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='audienceName'>
            /// The name of the audience
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static Audience GetAudience(this IAnalytics operations, string audienceName, string ownerName, string appName)
            {
                return operations.GetAudienceAsync(audienceName, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets audience definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='audienceName'>
            /// The name of the audience
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Audience> GetAudienceAsync(this IAnalytics operations, string audienceName, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAudienceWithHttpMessagesAsync(audienceName, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates audience definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='audienceName'>
            /// The name of the audience
            /// </param>
            /// <param name='audience'>
            /// Audience definition
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static Audience CreateOrUpdateAudience(this IAnalytics operations, string audienceName, AudienceDefinition audience, string ownerName, string appName)
            {
                return operations.CreateOrUpdateAudienceAsync(audienceName, audience, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates audience definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='audienceName'>
            /// The name of the audience
            /// </param>
            /// <param name='audience'>
            /// Audience definition
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Audience> CreateOrUpdateAudienceAsync(this IAnalytics operations, string audienceName, AudienceDefinition audience, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAudienceWithHttpMessagesAsync(audienceName, audience, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of device property values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyName'>
            /// Device property
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='contains'>
            /// Contains string
            /// </param>
            public static AudienceDevicePropertyValuesListResult ListDevicePropertyValues(this IAnalytics operations, string propertyName, string ownerName, string appName, string contains = default(string))
            {
                return operations.ListDevicePropertyValuesAsync(propertyName, ownerName, appName, contains).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of device property values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyName'>
            /// Device property
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='contains'>
            /// Contains string
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AudienceDevicePropertyValuesListResult> ListDevicePropertyValuesAsync(this IAnalytics operations, string propertyName, string ownerName, string appName, string contains = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDevicePropertyValuesWithHttpMessagesAsync(propertyName, ownerName, appName, contains, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of device properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static AudienceDevicePropertiesListResult ListDeviceProperties(this IAnalytics operations, string ownerName, string appName)
            {
                return operations.ListDevicePropertiesAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of device properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AudienceDevicePropertiesListResult> ListDevicePropertiesAsync(this IAnalytics operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDevicePropertiesWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of custom properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static AudienceDevicePropertiesListResult ListCustomProperties(this IAnalytics operations, string ownerName, string appName)
            {
                return operations.ListCustomPropertiesAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of custom properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AudienceDevicePropertiesListResult> ListCustomPropertiesAsync(this IAnalytics operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCustomPropertiesWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tests audience definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='audience'>
            /// Audience definition
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static AudienceTestResult TestAudience(this IAnalytics operations, AudienceDefinition audience, string ownerName, string appName)
            {
                return operations.TestAudienceAsync(audience, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tests audience definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='audience'>
            /// Audience definition
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AudienceTestResult> TestAudienceAsync(this IAnalytics operations, AudienceDefinition audience, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestAudienceWithHttpMessagesAsync(audience, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of audiences.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='includeDisabled'>
            /// Include disabled audience definitions
            /// </param>
            public static AudienceListResult ListAudiences(this IAnalytics operations, string ownerName, string appName, bool? includeDisabled = default(bool?))
            {
                return operations.ListAudiencesAsync(ownerName, appName, includeDisabled).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of audiences.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='includeDisabled'>
            /// Include disabled audience definitions
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AudienceListResult> ListAudiencesAsync(this IAnalytics operations, string ownerName, string appName, bool? includeDisabled = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAudiencesWithHttpMessagesAsync(ownerName, appName, includeDisabled, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Count of active devices by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            public static ActiveDeviceCounts DeviceCounts(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>))
            {
                return operations.DeviceCountsAsync(start, ownerName, appName, end, versions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Count of active devices by interval in the time range.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='start'>
            /// Start date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='end'>
            /// Last date time in data in ISO 8601 date time format
            /// </param>
            /// <param name='versions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ActiveDeviceCounts> DeviceCountsAsync(this IAnalytics operations, System.DateTime start, string ownerName, string appName, System.DateTime? end = default(System.DateTime?), IList<string> versions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeviceCountsWithHttpMessagesAsync(start, ownerName, appName, end, versions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
