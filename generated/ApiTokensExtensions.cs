// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ApiTokens.
    /// </summary>
    public static partial class ApiTokensExtensions
    {
            /// <summary>
            /// Delete the api_token object with the specific id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiTokenId'>
            /// The unique ID (UUID) of the api token
            /// </param>
            public static ErrorResponse Delete(this IApiTokens operations, string apiTokenId)
            {
                return operations.DeleteAsync(apiTokenId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the api_token object with the specific id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apiTokenId'>
            /// The unique ID (UUID) of the api token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteAsync(this IApiTokens operations, string apiTokenId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(apiTokenId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns api tokens for the authenticated user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object List(this IApiTokens operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns api tokens for the authenticated user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListAsync(this IApiTokens operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new API token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='description'>
            /// Description of the token
            /// </param>
            public static object NewOperation(this IApiTokens operations, ApiTokensCreateRequest description = default(ApiTokensCreateRequest))
            {
                return operations.NewOperationAsync(description).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new API token
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='description'>
            /// Description of the token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> NewOperationAsync(this IApiTokens operations, ApiTokensCreateRequest description = default(ApiTokensCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NewOperationWithHttpMessagesAsync(description, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
