// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Crashes.
    /// </summary>
    public static partial class CrashesExtensions
    {
            /// <summary>
            /// Gets a list of application versions
            /// </summary>
            /// <remarks>
            /// Gets a list of application versions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<AppVersion> GetAppVersions(this ICrashes operations, string ownerName, string appName)
            {
                return operations.GetAppVersionsAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of application versions
            /// </summary>
            /// <remarks>
            /// Gets a list of application versions
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AppVersion>> GetAppVersionsAsync(this ICrashes operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppVersionsWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates and updates the retention settings in days
            /// </summary>
            /// <remarks>
            /// Creates and updates the retention settings in days
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='retentionInDays'>
            /// The amount of days to keep the crashes for this application.
            /// retention_in_days is an enum value, can only be 28 or 90.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static RetentionSettings UpsertRetentionSettings(this ICrashes operations, RetentionSettings retentionInDays, string ownerName, string appName)
            {
                return operations.UpsertRetentionSettingsAsync(retentionInDays, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates and updates the retention settings in days
            /// </summary>
            /// <remarks>
            /// Creates and updates the retention settings in days
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='retentionInDays'>
            /// The amount of days to keep the crashes for this application.
            /// retention_in_days is an enum value, can only be 28 or 90.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RetentionSettings> UpsertRetentionSettingsAsync(this ICrashes operations, RetentionSettings retentionInDays, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertRetentionSettingsWithHttpMessagesAsync(retentionInDays, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// gets the retention settings in days
            /// </summary>
            /// <remarks>
            /// gets the retention settings in days
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static RetentionSettings GetRetentionSettings(this ICrashes operations, string ownerName, string appName)
            {
                return operations.GetRetentionSettingsAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// gets the retention settings in days
            /// </summary>
            /// <remarks>
            /// gets the retention settings in days
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RetentionSettings> GetRetentionSettingsAsync(this ICrashes operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRetentionSettingsWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the state of HockeyApp Crash forwarding for SxS apps
            /// </summary>
            /// <remarks>
            /// Gets the state of HockeyApp Crash forwarding for SxS apps
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static HockeyAppCrashForwardingInfo GetHockeyAppCrashForwardingStatus(this ICrashes operations, string ownerName, string appName)
            {
                return operations.GetHockeyAppCrashForwardingStatusAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the state of HockeyApp Crash forwarding for SxS apps
            /// </summary>
            /// <remarks>
            /// Gets the state of HockeyApp Crash forwarding for SxS apps
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HockeyAppCrashForwardingInfo> GetHockeyAppCrashForwardingStatusAsync(this ICrashes operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHockeyAppCrashForwardingStatusWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Enable HockeyApp crash forwarding for SxS apps
            /// </summary>
            /// <remarks>
            /// Enable HockeyApp crash forwarding for SxS apps
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Enable Forwarding
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static HockeyAppCrashForwardingInfo UpdateHockeyAppCrashForwarding(this ICrashes operations, HockeyAppCrashForwardingChange body, string ownerName, string appName)
            {
                return operations.UpdateHockeyAppCrashForwardingAsync(body, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enable HockeyApp crash forwarding for SxS apps
            /// </summary>
            /// <remarks>
            /// Enable HockeyApp crash forwarding for SxS apps
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Enable Forwarding
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HockeyAppCrashForwardingInfo> UpdateHockeyAppCrashForwardingAsync(this ICrashes operations, HockeyAppCrashForwardingChange body, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateHockeyAppCrashForwardingWithHttpMessagesAsync(body, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets whether the application has any crashes
            /// </summary>
            /// <remarks>
            /// Gets whether the application has any crashes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static AppCrashesInfo GetAppCrashesInfo(this ICrashes operations, string ownerName, string appName)
            {
                return operations.GetAppCrashesInfoAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets whether the application has any crashes
            /// </summary>
            /// <remarks>
            /// Gets whether the application has any crashes
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppCrashesInfo> GetAppCrashesInfoAsync(this ICrashes operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppCrashesInfoWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get session logs by crash ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashId'>
            /// The id of the a crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='date'>
            /// Date of data requested
            /// </param>
            public static GenericLogContainer ListSessionLogs(this ICrashes operations, string crashId, string ownerName, string appName, System.DateTime? date = default(System.DateTime?))
            {
                return operations.ListSessionLogsAsync(crashId, ownerName, appName, date).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get session logs by crash ID
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashId'>
            /// The id of the a crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='date'>
            /// Date of data requested
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GenericLogContainer> ListSessionLogsAsync(this ICrashes operations, string crashId, string ownerName, string appName, System.DateTime? date = default(System.DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSessionLogsWithHttpMessagesAsync(crashId, ownerName, appName, date, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets content of the text attachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='attachmentId'>
            /// attachment id
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static string GetCrashTextAttachmentContent(this ICrashes operations, string crashId, string attachmentId, string ownerName, string appName)
            {
                return operations.GetCrashTextAttachmentContentAsync(crashId, attachmentId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets content of the text attachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='attachmentId'>
            /// attachment id
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetCrashTextAttachmentContentAsync(this ICrashes operations, string crashId, string attachmentId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCrashTextAttachmentContentWithHttpMessagesAsync(crashId, attachmentId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the URI location to download crash attachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='attachmentId'>
            /// attachment id
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static CrashAttachmentLocation GetCrashAttachmentLocation(this ICrashes operations, string crashId, string attachmentId, string ownerName, string appName)
            {
                return operations.GetCrashAttachmentLocationAsync(crashId, attachmentId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the URI location to download crash attachment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='attachmentId'>
            /// attachment id
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashAttachmentLocation> GetCrashAttachmentLocationAsync(this ICrashes operations, string crashId, string attachmentId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCrashAttachmentLocationWithHttpMessagesAsync(crashId, attachmentId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all attachments for a specific crash
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<CrashAttachment> ListAttachments(this ICrashes operations, string crashId, string ownerName, string appName)
            {
                return operations.ListAttachmentsAsync(crashId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all attachments for a specific crash
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CrashAttachment>> ListAttachmentsAsync(this ICrashes operations, string crashId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAttachmentsWithHttpMessagesAsync(crashId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a stacktrace for a specific crash
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='groupingOnly'>
            /// true if the stacktrace should be only the relevant thread / exception.
            /// Default is false
            /// </param>
            public static Stacktrace GetStacktrace(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName, bool? groupingOnly = false)
            {
                return operations.GetStacktraceAsync(crashGroupId, crashId, ownerName, appName, groupingOnly).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a stacktrace for a specific crash
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='groupingOnly'>
            /// true if the stacktrace should be only the relevant thread / exception.
            /// Default is false
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stacktrace> GetStacktraceAsync(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName, bool? groupingOnly = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStacktraceWithHttpMessagesAsync(crashGroupId, crashId, ownerName, appName, groupingOnly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the URI location to download json of a specific crash
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static CrashRawLocation GetRawCrashLocation(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName)
            {
                return operations.GetRawCrashLocationAsync(crashGroupId, crashId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the URI location to download json of a specific crash
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashRawLocation> GetRawCrashLocationAsync(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRawCrashLocationWithHttpMessagesAsync(crashGroupId, crashId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the native log of a specific crash as a text attachment
            /// </summary>
            /// <remarks>
            /// Gets the native log of a specific crash as a text attachment
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static string GetNativeCrashDownload(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName)
            {
                return operations.GetNativeCrashDownloadAsync(crashGroupId, crashId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the native log of a specific crash as a text attachment
            /// </summary>
            /// <remarks>
            /// Gets the native log of a specific crash as a text attachment
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetNativeCrashDownloadAsync(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNativeCrashDownloadWithHttpMessagesAsync(crashGroupId, crashId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the native log of a specific crash
            /// </summary>
            /// <remarks>
            /// Gets the native log of a specific crash
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static string GetNativeCrash(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName)
            {
                return operations.GetNativeCrashAsync(crashGroupId, crashId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the native log of a specific crash
            /// </summary>
            /// <remarks>
            /// Gets the native log of a specific crash
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetNativeCrashAsync(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNativeCrashWithHttpMessagesAsync(crashGroupId, crashId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific crash for an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='includeReport'>
            /// true if the crash should include the raw crash report. Default is false
            /// </param>
            /// <param name='includeLog'>
            /// true if the crash should include the custom log report. Default is false
            /// </param>
            /// <param name='includeDetails'>
            /// true if the crash should include in depth crash details
            /// </param>
            /// <param name='includeStacktrace'>
            /// true if the crash should include the stacktrace information
            /// </param>
            /// <param name='groupingOnly'>
            /// true if the stacktrace should be only the relevant thread / exception.
            /// Default is false
            /// </param>
            public static Crash Get(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName, bool? includeReport = false, bool? includeLog = false, bool? includeDetails = false, bool? includeStacktrace = false, bool? groupingOnly = false)
            {
                return operations.GetAsync(crashGroupId, crashId, ownerName, appName, includeReport, includeLog, includeDetails, includeStacktrace, groupingOnly).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific crash for an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='includeReport'>
            /// true if the crash should include the raw crash report. Default is false
            /// </param>
            /// <param name='includeLog'>
            /// true if the crash should include the custom log report. Default is false
            /// </param>
            /// <param name='includeDetails'>
            /// true if the crash should include in depth crash details
            /// </param>
            /// <param name='includeStacktrace'>
            /// true if the crash should include the stacktrace information
            /// </param>
            /// <param name='groupingOnly'>
            /// true if the stacktrace should be only the relevant thread / exception.
            /// Default is false
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Crash> GetAsync(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName, bool? includeReport = false, bool? includeLog = false, bool? includeDetails = false, bool? includeStacktrace = false, bool? groupingOnly = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(crashGroupId, crashId, ownerName, appName, includeReport, includeLog, includeDetails, includeStacktrace, groupingOnly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a specific crash and related attachments and blobs for an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='retentionDelete'>
            /// true in that case if the method should skip update counts
            /// </param>
            public static CrashDeleteCounter Delete(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName, bool? retentionDelete = false)
            {
                return operations.DeleteAsync(crashGroupId, crashId, ownerName, appName, retentionDelete).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a specific crash and related attachments and blobs for an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='crashId'>
            /// id of a specific crash
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='retentionDelete'>
            /// true in that case if the method should skip update counts
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashDeleteCounter> DeleteAsync(this ICrashes operations, string crashGroupId, string crashId, string ownerName, string appName, bool? retentionDelete = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(crashGroupId, crashId, ownerName, appName, retentionDelete, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all crashes of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='includeReport'>
            /// true if the crash should include the raw crash report. Default is false
            /// </param>
            /// <param name='includeLog'>
            /// true if the crash should include the custom log report. Default is false
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='appVersion'>
            /// version
            /// </param>
            /// <param name='errorType'>
            /// Possible values include: 'CrashingErrors', 'HandledErrors'
            /// </param>
            public static IList<Crash> List(this ICrashes operations, string crashGroupId, string ownerName, string appName, bool? includeReport = false, bool? includeLog = false, System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), string appVersion = default(string), string errorType = default(string))
            {
                return operations.ListAsync(crashGroupId, ownerName, appName, includeReport, includeLog, dateFrom, dateTo, appVersion, errorType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all crashes of a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='includeReport'>
            /// true if the crash should include the raw crash report. Default is false
            /// </param>
            /// <param name='includeLog'>
            /// true if the crash should include the custom log report. Default is false
            /// </param>
            /// <param name='dateFrom'>
            /// </param>
            /// <param name='dateTo'>
            /// </param>
            /// <param name='appVersion'>
            /// version
            /// </param>
            /// <param name='errorType'>
            /// Possible values include: 'CrashingErrors', 'HandledErrors'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Crash>> ListAsync(this ICrashes operations, string crashGroupId, string ownerName, string appName, bool? includeReport = false, bool? includeLog = false, System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), string appVersion = default(string), string errorType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(crashGroupId, ownerName, appName, includeReport, includeLog, dateFrom, dateTo, appVersion, errorType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
