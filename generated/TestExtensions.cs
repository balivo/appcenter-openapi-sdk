// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Test.
    /// </summary>
    public static partial class TestExtensions
    {
            /// <summary>
            /// Gets a device set belonging to the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static DeviceSet GetDeviceSetOfUser(this ITest operations, System.Guid id, string ownerName, string appName)
            {
                return operations.GetDeviceSetOfUserAsync(id, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a device set belonging to the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceSet> GetDeviceSetOfUserAsync(this ITest operations, System.Guid id, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeviceSetOfUserWithHttpMessagesAsync(id, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a device set belonging to the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='deviceSet'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object UpdateDeviceSetOfUser(this ITest operations, System.Guid id, DeviceSetUpdate deviceSet, string ownerName, string appName)
            {
                return operations.UpdateDeviceSetOfUserAsync(id, deviceSet, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a device set belonging to the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='deviceSet'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDeviceSetOfUserAsync(this ITest operations, System.Guid id, DeviceSetUpdate deviceSet, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDeviceSetOfUserWithHttpMessagesAsync(id, deviceSet, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a device set belonging to the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void DeleteDeviceSetOfUser(this ITest operations, System.Guid id, string ownerName, string appName)
            {
                operations.DeleteDeviceSetOfUserAsync(id, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a device set belonging to the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDeviceSetOfUserAsync(this ITest operations, System.Guid id, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDeviceSetOfUserWithHttpMessagesAsync(id, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists device sets belonging to the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<DeviceSet> ListDeviceSetsOfUser(this ITest operations, string ownerName, string appName)
            {
                return operations.ListDeviceSetsOfUserAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists device sets belonging to the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeviceSet>> ListDeviceSetsOfUserAsync(this ITest operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeviceSetsOfUserWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a device set belonging to the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceSet'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object CreateDeviceSetOfUser(this ITest operations, DeviceSetUpdate deviceSet, string ownerName, string appName)
            {
                return operations.CreateDeviceSetOfUserAsync(deviceSet, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a device set belonging to the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceSet'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDeviceSetOfUserAsync(this ITest operations, DeviceSetUpdate deviceSet, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDeviceSetOfUserWithHttpMessagesAsync(deviceSet, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of all test runs for a given test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<TestRun> GetAllTestRunsForSeries(this ITest operations, string testSeriesSlug, string ownerName, string appName)
            {
                return operations.GetAllTestRunsForSeriesAsync(testSeriesSlug, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of all test runs for a given test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TestRun>> GetAllTestRunsForSeriesAsync(this ITest operations, string testSeriesSlug, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTestRunsForSeriesWithHttpMessagesAsync(testSeriesSlug, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a single test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void DeleteTestSeries(this ITest operations, string testSeriesSlug, string ownerName, string appName)
            {
                operations.DeleteTestSeriesAsync(testSeriesSlug, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a single test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTestSeriesAsync(this ITest operations, string testSeriesSlug, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTestSeriesWithHttpMessagesAsync(testSeriesSlug, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates name and slug of a test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestSeries PatchTestSeries(this ITest operations, string testSeriesSlug, TestSeriesName name, string ownerName, string appName)
            {
                return operations.PatchTestSeriesAsync(testSeriesSlug, name, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates name and slug of a test series
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesSlug'>
            /// The slug of the test series
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestSeries> PatchTestSeriesAsync(this ITest operations, string testSeriesSlug, TestSeriesName name, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchTestSeriesWithHttpMessagesAsync(testSeriesSlug, name, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns list of all test series for an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='query'>
            /// A query string to filter test series
            /// </param>
            public static IList<TestSeries> GetAllTestSeries(this ITest operations, string ownerName, string appName, string query = default(string))
            {
                return operations.GetAllTestSeriesAsync(ownerName, appName, query).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns list of all test series for an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='query'>
            /// A query string to filter test series
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TestSeries>> GetAllTestSeriesAsync(this ITest operations, string ownerName, string appName, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTestSeriesWithHttpMessagesAsync(ownerName, appName, query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates new test series for an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesName'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object CreateTestSeries(this ITest operations, TestSeriesName testSeriesName, string ownerName, string appName)
            {
                return operations.CreateTestSeriesAsync(testSeriesName, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates new test series for an application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testSeriesName'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTestSeriesAsync(this ITest operations, TestSeriesName testSeriesName, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTestSeriesWithHttpMessagesAsync(testSeriesName, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop a test run execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run to be stopped
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestRun StopTestRun(this ITest operations, string testRunId, string ownerName, string appName)
            {
                return operations.StopTestRunAsync(testRunId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop a test run execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run to be stopped
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestRun> StopTestRunAsync(this ITest operations, string testRunId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopTestRunWithHttpMessagesAsync(testRunId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets state of the test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestRunState GetTestRunState(this ITest operations, string testRunId, string ownerName, string appName)
            {
                return operations.GetTestRunStateAsync(testRunId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets state of the test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestRunState> GetTestRunStateAsync(this ITest operations, string testRunId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTestRunStateWithHttpMessagesAsync(testRunId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='startOptions'>
            /// Option required to start the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestCloudStartTestRunResult StartTestRun(this ITest operations, string testRunId, TestCloudStartTestRunOptions startOptions, string ownerName, string appName)
            {
                return operations.StartTestRunAsync(testRunId, startOptions, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='startOptions'>
            /// Option required to start the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestCloudStartTestRunResult> StartTestRunAsync(this ITest operations, string testRunId, TestCloudStartTestRunOptions startOptions, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartTestRunWithHttpMessagesAsync(testRunId, startOptions, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a single test report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestReport GetTestReport(this ITest operations, System.Guid testRunId, string ownerName, string appName)
            {
                return operations.GetTestReportAsync(testRunId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single test report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestReport> GetTestReportAsync(this ITest operations, System.Guid testRunId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTestReportWithHttpMessagesAsync(testRunId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds file with the given hash to a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='fileInfo'>
            /// File hash information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<TestCloudFileHashResponse> UploadHashesBatch(this ITest operations, string testRunId, IList<TestCloudFileHash> fileInfo, string ownerName, string appName)
            {
                return operations.UploadHashesBatchAsync(testRunId, fileInfo, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds file with the given hash to a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='fileInfo'>
            /// File hash information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TestCloudFileHashResponse>> UploadHashesBatchAsync(this ITest operations, string testRunId, IList<TestCloudFileHash> fileInfo, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadHashesBatchWithHttpMessagesAsync(testRunId, fileInfo, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds file with the given hash to a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='fileInfo'>
            /// File hash information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestUploadHashHeaders UploadHash(this ITest operations, string testRunId, TestCloudFileHashDeprecated fileInfo, string ownerName, string appName)
            {
                return operations.UploadHashAsync(testRunId, fileInfo, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds file with the given hash to a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='fileInfo'>
            /// File hash information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestUploadHashHeaders> UploadHashAsync(this ITest operations, string testRunId, TestCloudFileHashDeprecated fileInfo, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadHashWithHttpMessagesAsync(testRunId, fileInfo, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Uploads file for a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestStartUploadingFileHeaders StartUploadingFile(this ITest operations, string testRunId, string ownerName, string appName)
            {
                return operations.StartUploadingFileAsync(testRunId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads file for a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestStartUploadingFileHeaders> StartUploadingFileAsync(this ITest operations, string testRunId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartUploadingFileWithHttpMessagesAsync(testRunId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Returns a single test runs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestRun GetTestRun(this ITest operations, System.Guid testRunId, string ownerName, string appName)
            {
                return operations.GetTestRunAsync(testRunId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single test runs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestRun> GetTestRunAsync(this ITest operations, System.Guid testRunId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTestRunWithHttpMessagesAsync(testRunId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Logically deletes a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestRun ArchiveTestRun(this ITest operations, System.Guid testRunId, string ownerName, string appName)
            {
                return operations.ArchiveTestRunAsync(testRunId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Logically deletes a test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='testRunId'>
            /// The ID of the test run
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestRun> ArchiveTestRunAsync(this ITest operations, System.Guid testRunId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ArchiveTestRunWithHttpMessagesAsync(testRunId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of test runs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<TestRun> GetTestRuns(this ITest operations, string ownerName, string appName)
            {
                return operations.GetTestRunsAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of test runs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TestRun>> GetTestRunsAsync(this ITest operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTestRunsWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestCreateTestRunHeaders CreateTestRun(this ITest operations, string ownerName, string appName)
            {
                return operations.CreateTestRunAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new test run
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestCreateTestRunHeaders> CreateTestRunAsync(this ITest operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTestRunWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists test run data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestGDPRTestRun GdprExportTestRun(this ITest operations, string ownerName, string appName)
            {
                return operations.GdprExportTestRunAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists test run data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestGDPRTestRun> GdprExportTestRunAsync(this ITest operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GdprExportTestRunWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists pipeline test data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestGDPRPipelineTest GdprExportPipelineTest(this ITest operations, string ownerName, string appName)
            {
                return operations.GdprExportPipelineTestAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists pipeline test data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestGDPRPipelineTest> GdprExportPipelineTestAsync(this ITest operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GdprExportPipelineTestWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists hash file data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestGDPRHashFile GdprExportHashFile(this ITest operations, string ownerName, string appName)
            {
                return operations.GdprExportHashFileAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists hash file data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestGDPRHashFile> GdprExportHashFileAsync(this ITest operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GdprExportHashFileWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists file set file data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestGDPRFileSetFile GdprExportFileSetFile(this ITest operations, string ownerName, string appName)
            {
                return operations.GdprExportFileSetFileAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists file set file data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestGDPRFileSetFile> GdprExportFileSetFileAsync(this ITest operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GdprExportFileSetFileWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the endpoints available for Test app data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static TestGDPRResourceList GdprExportApp(this ITest operations, string ownerName, string appName)
            {
                return operations.GdprExportAppAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the endpoints available for Test app data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestGDPRResourceList> GdprExportAppAsync(this ITest operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GdprExportAppWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get information about the currently active subscriptions, if any
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static Subscription GetSubscriptions(this ITest operations, string ownerName, string appName)
            {
                return operations.GetSubscriptionsAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get information about the currently active subscriptions, if any
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscription> GetSubscriptionsAsync(this ITest operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionsWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Accept a free trial subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static Subscription CreateSubscription(this ITest operations, string ownerName, string appName)
            {
                return operations.CreateSubscriptionAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Accept a free trial subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscription> CreateSubscriptionAsync(this ITest operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSubscriptionWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a device set belonging to the owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static DeviceSet GetDeviceSetOfOwner(this ITest operations, System.Guid id, string ownerName, string appName)
            {
                return operations.GetDeviceSetOfOwnerAsync(id, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a device set belonging to the owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeviceSet> GetDeviceSetOfOwnerAsync(this ITest operations, System.Guid id, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeviceSetOfOwnerWithHttpMessagesAsync(id, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a device set belonging to the owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='deviceSet'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object UpdateDeviceSetOfOwner(this ITest operations, System.Guid id, DeviceSetUpdate deviceSet, string ownerName, string appName)
            {
                return operations.UpdateDeviceSetOfOwnerAsync(id, deviceSet, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a device set belonging to the owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='deviceSet'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDeviceSetOfOwnerAsync(this ITest operations, System.Guid id, DeviceSetUpdate deviceSet, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDeviceSetOfOwnerWithHttpMessagesAsync(id, deviceSet, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a device set belonging to the owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void DeleteDeviceSetOfOwner(this ITest operations, System.Guid id, string ownerName, string appName)
            {
                operations.DeleteDeviceSetOfOwnerAsync(id, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a device set belonging to the owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The UUID of the device set
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDeviceSetOfOwnerAsync(this ITest operations, System.Guid id, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDeviceSetOfOwnerWithHttpMessagesAsync(id, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists device sets belonging to the owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<DeviceSet> ListDeviceSetsOfOwner(this ITest operations, string ownerName, string appName)
            {
                return operations.ListDeviceSetsOfOwnerAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists device sets belonging to the owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeviceSet>> ListDeviceSetsOfOwnerAsync(this ITest operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeviceSetsOfOwnerWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a device set belonging to the owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceSet'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object CreateDeviceSetOfOwner(this ITest operations, DeviceSetUpdate deviceSet, string ownerName, string appName)
            {
                return operations.CreateDeviceSetOfOwnerAsync(deviceSet, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a device set belonging to the owner
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceSet'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDeviceSetOfOwnerAsync(this ITest operations, DeviceSetUpdate deviceSet, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDeviceSetOfOwnerWithHttpMessagesAsync(deviceSet, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a short ID for a list of devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceList'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object CreateDeviceSelection(this ITest operations, DeviceList deviceList, string ownerName, string appName)
            {
                return operations.CreateDeviceSelectionAsync(deviceList, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a short ID for a list of devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceList'>
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDeviceSelectionAsync(this ITest operations, DeviceList deviceList, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDeviceSelectionWithHttpMessagesAsync(deviceList, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of available devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='appUploadId'>
            /// The ID of the test run
            /// </param>
            public static IList<DeviceConfiguration> GetDeviceConfigurations(this ITest operations, string ownerName, string appName, System.Guid? appUploadId = default(System.Guid?))
            {
                return operations.GetDeviceConfigurationsAsync(ownerName, appName, appUploadId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of available devices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='appUploadId'>
            /// The ID of the test run
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeviceConfiguration>> GetDeviceConfigurationsAsync(this ITest operations, string ownerName, string appName, System.Guid? appUploadId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeviceConfigurationsWithHttpMessagesAsync(ownerName, appName, appUploadId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists user data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TestGDPRUser GdprExportUser(this ITest operations)
            {
                return operations.GdprExportUserAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists user data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestGDPRUser> GdprExportUserAsync(this ITest operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GdprExportUserWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists feature flag data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TestGDPRFeatureFlag GdprExportFeatureFlag(this ITest operations)
            {
                return operations.GdprExportFeatureFlagAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists feature flag data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestGDPRFeatureFlag> GdprExportFeatureFlagAsync(this ITest operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GdprExportFeatureFlagWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the endpoints available for Test account data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TestGDPRResourceList GdprExportAccount(this ITest operations)
            {
                return operations.GdprExportAccountAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the endpoints available for Test account data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TestGDPRResourceList> GdprExportAccountAsync(this ITest operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GdprExportAccountWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
