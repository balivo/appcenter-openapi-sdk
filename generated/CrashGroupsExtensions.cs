// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CrashGroups.
    /// </summary>
    public static partial class CrashGroupsExtensions
    {
            /// <summary>
            /// Gets a stacktrace for a specific crash
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='groupingOnly'>
            /// true if the stacktrace should be only the relevant thread / exception.
            /// Default is false
            /// </param>
            public static Stacktrace GetStacktrace(this ICrashGroups operations, string crashGroupId, string ownerName, string appName, bool? groupingOnly = false)
            {
                return operations.GetStacktraceAsync(crashGroupId, ownerName, appName, groupingOnly).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a stacktrace for a specific crash
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='groupingOnly'>
            /// true if the stacktrace should be only the relevant thread / exception.
            /// Default is false
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Stacktrace> GetStacktraceAsync(this ICrashGroups operations, string crashGroupId, string ownerName, string appName, bool? groupingOnly = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStacktraceWithHttpMessagesAsync(crashGroupId, ownerName, appName, groupingOnly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static CrashGroup Get(this ICrashGroups operations, string crashGroupId, string ownerName, string appName)
            {
                return operations.GetAsync(crashGroupId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashGroup> GetAsync(this ICrashGroups operations, string crashGroupId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(crashGroupId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='group'>
            /// Group change object. All fields are optional and only provided fields will
            /// get updated.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static CrashGroup Update(this ICrashGroups operations, string crashGroupId, CrashGroupChange group, string ownerName, string appName)
            {
                return operations.UpdateAsync(crashGroupId, group, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='crashGroupId'>
            /// id of a specific group
            /// </param>
            /// <param name='group'>
            /// Group change object. All fields are optional and only provided fields will
            /// get updated.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashGroup> UpdateAsync(this ICrashGroups operations, string crashGroupId, CrashGroupChange group, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(crashGroupId, group, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of crash groups and whether the list contains all available
            /// groups.
            /// </summary>
            /// <remarks>
            /// Gets a list of crash groups and whether the list contains all available
            /// groups.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='lastOccurrenceFrom'>
            /// Earliest date when the last time a crash occured in a crash group
            /// </param>
            /// <param name='lastOccurrenceTo'>
            /// Latest date when the last time a crash occured in a crash group
            /// </param>
            /// <param name='appVersion'>
            /// version
            /// </param>
            /// <param name='groupType'>
            /// Possible values include: 'GroupType1', 'GroupType2'
            /// </param>
            /// <param name='groupStatus'>
            /// Possible values include: 'open', 'closed', 'ignored'
            /// </param>
            /// <param name='groupTextSearch'>
            /// A freetext search that matches in crash, crash types, crash stack_traces
            /// and crash user
            /// </param>
            /// <param name='orderby'>
            /// the OData-like $orderby argument. Possible values include: 'last_occurrence
            /// asc', 'last_occurrence desc', 'count asc', 'count desc', 'display_id asc',
            /// 'display_id desc', 'impacted_users asc', 'impacted_users desc'
            /// </param>
            /// <param name='continuationToken'>
            /// Cassandra request continuation token. The token is used for pagination.
            /// </param>
            public static CrashGroupsContainer List(this ICrashGroups operations, string ownerName, string appName, System.DateTime? lastOccurrenceFrom = default(System.DateTime?), System.DateTime? lastOccurrenceTo = default(System.DateTime?), string appVersion = default(string), string groupType = default(string), string groupStatus = default(string), string groupTextSearch = default(string), string orderby = default(string), string continuationToken = default(string))
            {
                return operations.ListAsync(ownerName, appName, lastOccurrenceFrom, lastOccurrenceTo, appVersion, groupType, groupStatus, groupTextSearch, orderby, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of crash groups and whether the list contains all available
            /// groups.
            /// </summary>
            /// <remarks>
            /// Gets a list of crash groups and whether the list contains all available
            /// groups.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='lastOccurrenceFrom'>
            /// Earliest date when the last time a crash occured in a crash group
            /// </param>
            /// <param name='lastOccurrenceTo'>
            /// Latest date when the last time a crash occured in a crash group
            /// </param>
            /// <param name='appVersion'>
            /// version
            /// </param>
            /// <param name='groupType'>
            /// Possible values include: 'GroupType1', 'GroupType2'
            /// </param>
            /// <param name='groupStatus'>
            /// Possible values include: 'open', 'closed', 'ignored'
            /// </param>
            /// <param name='groupTextSearch'>
            /// A freetext search that matches in crash, crash types, crash stack_traces
            /// and crash user
            /// </param>
            /// <param name='orderby'>
            /// the OData-like $orderby argument. Possible values include: 'last_occurrence
            /// asc', 'last_occurrence desc', 'count asc', 'count desc', 'display_id asc',
            /// 'display_id desc', 'impacted_users asc', 'impacted_users desc'
            /// </param>
            /// <param name='continuationToken'>
            /// Cassandra request continuation token. The token is used for pagination.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CrashGroupsContainer> ListAsync(this ICrashGroups operations, string ownerName, string appName, System.DateTime? lastOccurrenceFrom = default(System.DateTime?), System.DateTime? lastOccurrenceTo = default(System.DateTime?), string appVersion = default(string), string groupType = default(string), string groupStatus = default(string), string groupTextSearch = default(string), string orderby = default(string), string continuationToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(ownerName, appName, lastOccurrenceFrom, lastOccurrenceTo, appVersion, groupType, groupStatus, groupTextSearch, orderby, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
