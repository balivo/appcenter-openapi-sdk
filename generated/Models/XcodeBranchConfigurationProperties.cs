// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Build configuration when Xcode is part of the build steps
    /// </summary>
    public partial class XcodeBranchConfigurationProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// XcodeBranchConfigurationProperties class.
        /// </summary>
        public XcodeBranchConfigurationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// XcodeBranchConfigurationProperties class.
        /// </summary>
        /// <param name="projectOrWorkspacePath">Xcode project/workspace
        /// path</param>
        /// <param name="podfilePath">Path to CococaPods file, if
        /// present</param>
        /// <param name="cartfilePath">Path to Carthage file, if
        /// present</param>
        /// <param name="xcodeProjectSha">The selected pbxproject hash to the
        /// repositroy</param>
        /// <param name="archiveConfiguration">The build configuration of the
        /// target to archive</param>
        /// <param name="targetToArchive">The target id of the selected scheme
        /// to archive</param>
        public XcodeBranchConfigurationProperties(string projectOrWorkspacePath, string scheme, string xcodeVersion, string podfilePath = default(string), string cartfilePath = default(string), string provisioningProfileEncoded = default(string), string certificateEncoded = default(string), string provisioningProfileFileId = default(string), string certificateFileId = default(string), string provisioningProfileUploadId = default(string), string certificateUploadId = default(string), string certificatePassword = default(string), string provisioningProfileFilename = default(string), string certificateFilename = default(string), string teamId = default(string), bool? automaticSigning = default(bool?), string xcodeProjectSha = default(string), string archiveConfiguration = default(string), string targetToArchive = default(string))
        {
            ProjectOrWorkspacePath = projectOrWorkspacePath;
            PodfilePath = podfilePath;
            CartfilePath = cartfilePath;
            ProvisioningProfileEncoded = provisioningProfileEncoded;
            CertificateEncoded = certificateEncoded;
            ProvisioningProfileFileId = provisioningProfileFileId;
            CertificateFileId = certificateFileId;
            ProvisioningProfileUploadId = provisioningProfileUploadId;
            CertificateUploadId = certificateUploadId;
            CertificatePassword = certificatePassword;
            Scheme = scheme;
            XcodeVersion = xcodeVersion;
            ProvisioningProfileFilename = provisioningProfileFilename;
            CertificateFilename = certificateFilename;
            TeamId = teamId;
            AutomaticSigning = automaticSigning;
            XcodeProjectSha = xcodeProjectSha;
            ArchiveConfiguration = archiveConfiguration;
            TargetToArchive = targetToArchive;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets xcode project/workspace path
        /// </summary>
        [JsonProperty(PropertyName = "projectOrWorkspacePath")]
        public string ProjectOrWorkspacePath { get; set; }

        /// <summary>
        /// Gets or sets path to CococaPods file, if present
        /// </summary>
        [JsonProperty(PropertyName = "podfilePath")]
        public string PodfilePath { get; set; }

        /// <summary>
        /// Gets or sets path to Carthage file, if present
        /// </summary>
        [JsonProperty(PropertyName = "cartfilePath")]
        public string CartfilePath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provisioningProfileEncoded")]
        public string ProvisioningProfileEncoded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "certificateEncoded")]
        public string CertificateEncoded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provisioningProfileFileId")]
        public string ProvisioningProfileFileId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "certificateFileId")]
        public string CertificateFileId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provisioningProfileUploadId")]
        public string ProvisioningProfileUploadId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "certificateUploadId")]
        public string CertificateUploadId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "certificatePassword")]
        public string CertificatePassword { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "scheme")]
        public string Scheme { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "xcodeVersion")]
        public string XcodeVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provisioningProfileFilename")]
        public string ProvisioningProfileFilename { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "certificateFilename")]
        public string CertificateFilename { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "teamId")]
        public string TeamId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "automaticSigning")]
        public bool? AutomaticSigning { get; set; }

        /// <summary>
        /// Gets or sets the selected pbxproject hash to the repositroy
        /// </summary>
        [JsonProperty(PropertyName = "xcodeProjectSha")]
        public string XcodeProjectSha { get; set; }

        /// <summary>
        /// Gets or sets the build configuration of the target to archive
        /// </summary>
        [JsonProperty(PropertyName = "archiveConfiguration")]
        public string ArchiveConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the target id of the selected scheme to archive
        /// </summary>
        [JsonProperty(PropertyName = "targetToArchive")]
        public string TargetToArchive { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ProjectOrWorkspacePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProjectOrWorkspacePath");
            }
            if (Scheme == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Scheme");
            }
            if (XcodeVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "XcodeVersion");
            }
        }
    }
}
