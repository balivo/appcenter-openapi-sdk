// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class DistributionGroupUserGetResponse
    {
        /// <summary>
        /// Initializes a new instance of the DistributionGroupUserGetResponse
        /// class.
        /// </summary>
        public DistributionGroupUserGetResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DistributionGroupUserGetResponse
        /// class.
        /// </summary>
        /// <param name="email">The email address of the user</param>
        /// <param name="id">The unique id (UUID) of the user</param>
        /// <param name="avatarUrl">The avatar URL of the user</param>
        /// <param name="canChangePassword">User is required to send an old
        /// password in order to change the password.</param>
        /// <param name="displayName">The full name of the user. Might for
        /// example be first and last name</param>
        /// <param name="invitePending">Whether the has accepted the invite.
        /// Available when an invite is pending, and the value will be
        /// "true".</param>
        /// <param name="name">The unique name that is used to identify the
        /// user.</param>
        public DistributionGroupUserGetResponse(string email, System.Guid? id = default(System.Guid?), string avatarUrl = default(string), bool? canChangePassword = default(bool?), string displayName = default(string), bool? invitePending = default(bool?), string name = default(string))
        {
            Id = id;
            AvatarUrl = avatarUrl;
            CanChangePassword = canChangePassword;
            DisplayName = displayName;
            Email = email;
            InvitePending = invitePending;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique id (UUID) of the user
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// Gets or sets the avatar URL of the user
        /// </summary>
        [JsonProperty(PropertyName = "avatar_url")]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Gets or sets user is required to send an old password in order to
        /// change the password.
        /// </summary>
        [JsonProperty(PropertyName = "can_change_password")]
        public bool? CanChangePassword { get; set; }

        /// <summary>
        /// Gets or sets the full name of the user. Might for example be first
        /// and last name
        /// </summary>
        [JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the email address of the user
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets whether the has accepted the invite. Available when an
        /// invite is pending, and the value will be "true".
        /// </summary>
        [JsonProperty(PropertyName = "invite_pending")]
        public bool? InvitePending { get; set; }

        /// <summary>
        /// Gets or sets the unique name that is used to identify the user.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
        }
    }
}
