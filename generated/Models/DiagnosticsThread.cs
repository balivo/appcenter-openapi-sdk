// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// a thread representation
    /// </summary>
    public partial class DiagnosticsThread
    {
        /// <summary>
        /// Initializes a new instance of the DiagnosticsThread class.
        /// </summary>
        public DiagnosticsThread()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiagnosticsThread class.
        /// </summary>
        /// <param name="title">name of the thread</param>
        /// <param name="frames">frames of that thread</param>
        /// <param name="exception">potential additional exception happened in
        /// that thread (Last Exception Backtrace)</param>
        /// <param name="relevant">Shows if a thread is relevant or not. Is
        /// false if all frames are non relevant, otherwise true</param>
        /// <param name="platform">SDK/Platform this thread is beeing generated
        /// from. Possible values include: 'ios', 'android', 'xamarin',
        /// 'react-native', 'ndk', 'unity', 'other'</param>
        /// <param name="crashed">True if this thread crashed</param>
        public DiagnosticsThread(string title, IList<DiagnosticsStackFrame> frames, DiagnosticsException exception = default(DiagnosticsException), bool? relevant = default(bool?), string platform = default(string), bool? crashed = default(bool?))
        {
            Title = title;
            Frames = frames;
            Exception = exception;
            Relevant = relevant;
            Platform = platform;
            Crashed = crashed;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the thread
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets frames of that thread
        /// </summary>
        [JsonProperty(PropertyName = "frames")]
        public IList<DiagnosticsStackFrame> Frames { get; set; }

        /// <summary>
        /// Gets or sets potential additional exception happened in that thread
        /// (Last Exception Backtrace)
        /// </summary>
        [JsonProperty(PropertyName = "exception")]
        public DiagnosticsException Exception { get; set; }

        /// <summary>
        /// Gets or sets shows if a thread is relevant or not. Is false if all
        /// frames are non relevant, otherwise true
        /// </summary>
        [JsonProperty(PropertyName = "relevant")]
        public bool? Relevant { get; set; }

        /// <summary>
        /// Gets or sets sDK/Platform this thread is beeing generated from.
        /// Possible values include: 'ios', 'android', 'xamarin',
        /// 'react-native', 'ndk', 'unity', 'other'
        /// </summary>
        [JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or sets true if this thread crashed
        /// </summary>
        [JsonProperty(PropertyName = "crashed")]
        public bool? Crashed { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (Frames == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Frames");
            }
            if (Frames != null)
            {
                foreach (var element in Frames)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Exception != null)
            {
                Exception.Validate();
            }
        }
    }
}
