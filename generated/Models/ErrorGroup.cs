// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ErrorGroup : ErrorGroupState
    {
        /// <summary>
        /// Initializes a new instance of the ErrorGroup class.
        /// </summary>
        public ErrorGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ErrorGroup class.
        /// </summary>
        /// <param name="state">Possible values include: 'open', 'closed',
        /// 'ignored'</param>
        public ErrorGroup(string state, string errorGroupId, string appVersion, long count, long deviceCount, System.DateTime firstOccurrence, System.DateTime lastOccurrence, string annotation = default(string), string exceptionType = default(string), string exceptionMessage = default(string), string exceptionFile = default(string), string exceptionLine = default(string), IList<HandledErrorReasonFrame> reasonFrames = default(IList<HandledErrorReasonFrame>))
            : base(state, annotation)
        {
            ErrorGroupId = errorGroupId;
            AppVersion = appVersion;
            Count = count;
            DeviceCount = deviceCount;
            FirstOccurrence = firstOccurrence;
            LastOccurrence = lastOccurrence;
            ExceptionType = exceptionType;
            ExceptionMessage = exceptionMessage;
            ExceptionFile = exceptionFile;
            ExceptionLine = exceptionLine;
            ReasonFrames = reasonFrames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "errorGroupId")]
        public string ErrorGroupId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "appVersion")]
        public string AppVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public long Count { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deviceCount")]
        public long DeviceCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "firstOccurrence")]
        public System.DateTime FirstOccurrence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastOccurrence")]
        public System.DateTime LastOccurrence { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exceptionType")]
        public string ExceptionType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exceptionMessage")]
        public string ExceptionMessage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exceptionFile")]
        public string ExceptionFile { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exceptionLine")]
        public string ExceptionLine { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reasonFrames")]
        public IList<HandledErrorReasonFrame> ReasonFrames { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ErrorGroupId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ErrorGroupId");
            }
            if (AppVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppVersion");
            }
        }
    }
}
