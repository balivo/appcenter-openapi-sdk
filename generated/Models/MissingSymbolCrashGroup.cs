// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// missing symbol crash group object
    /// </summary>
    public partial class MissingSymbolCrashGroup
    {
        /// <summary>
        /// Initializes a new instance of the MissingSymbolCrashGroup class.
        /// </summary>
        public MissingSymbolCrashGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MissingSymbolCrashGroup class.
        /// </summary>
        /// <param name="symbolGroupId">id of the symbol group</param>
        /// <param name="appId">application id</param>
        /// <param name="appVer">application version</param>
        /// <param name="appBuild">application build</param>
        /// <param name="lastModified">last update date for the group</param>
        /// <param name="missingSymbols">list of missing symbols</param>
        /// <param name="status">group status. Possible values include:
        /// 'active', 'pending', 'closed'</param>
        /// <param name="crashCount">number of crashes that belong to this
        /// group</param>
        public MissingSymbolCrashGroup(string symbolGroupId, string appId, string appVer, string appBuild, System.DateTime lastModified, IList<MissingSymbol> missingSymbols, string status, int? crashCount = default(int?))
        {
            SymbolGroupId = symbolGroupId;
            CrashCount = crashCount;
            AppId = appId;
            AppVer = appVer;
            AppBuild = appBuild;
            LastModified = lastModified;
            MissingSymbols = missingSymbols;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets id of the symbol group
        /// </summary>
        [JsonProperty(PropertyName = "symbol_group_id")]
        public string SymbolGroupId { get; set; }

        /// <summary>
        /// Gets or sets number of crashes that belong to this group
        /// </summary>
        [JsonProperty(PropertyName = "crash_count")]
        public int? CrashCount { get; set; }

        /// <summary>
        /// Gets or sets application id
        /// </summary>
        [JsonProperty(PropertyName = "app_id")]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or sets application version
        /// </summary>
        [JsonProperty(PropertyName = "app_ver")]
        public string AppVer { get; set; }

        /// <summary>
        /// Gets or sets application build
        /// </summary>
        [JsonProperty(PropertyName = "app_build")]
        public string AppBuild { get; set; }

        /// <summary>
        /// Gets or sets last update date for the group
        /// </summary>
        [JsonProperty(PropertyName = "last_modified")]
        public System.DateTime LastModified { get; set; }

        /// <summary>
        /// Gets or sets list of missing symbols
        /// </summary>
        [JsonProperty(PropertyName = "missing_symbols")]
        public IList<MissingSymbol> MissingSymbols { get; set; }

        /// <summary>
        /// Gets or sets group status. Possible values include: 'active',
        /// 'pending', 'closed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SymbolGroupId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SymbolGroupId");
            }
            if (AppId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppId");
            }
            if (AppVer == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppVer");
            }
            if (AppBuild == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppBuild");
            }
            if (MissingSymbols == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MissingSymbols");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (MissingSymbols != null)
            {
                foreach (var element in MissingSymbols)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
