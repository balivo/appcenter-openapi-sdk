// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// a exception
    /// </summary>
    public partial class Exception
    {
        /// <summary>
        /// Initializes a new instance of the Exception class.
        /// </summary>
        public Exception()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Exception class.
        /// </summary>
        /// <param name="frames">frames of the excetpion</param>
        /// <param name="reason">Reason of the exception</param>
        /// <param name="type">Type of the exception (NSSomethingException,
        /// NullPointerException)</param>
        /// <param name="relevant">relevant exception (crashed)</param>
        /// <param name="platform">SDK/Platform this thread is beeing generated
        /// from. Possible values include: 'ios', 'android', 'xamarin',
        /// 'react-native', 'ndk', 'unity', 'other'</param>
        public Exception(IList<StackFrame> frames, string reason = default(string), string type = default(string), bool? relevant = default(bool?), IList<Exception> innerExceptions = default(IList<Exception>), string platform = default(string))
        {
            Reason = reason;
            Type = type;
            Frames = frames;
            Relevant = relevant;
            InnerExceptions = innerExceptions;
            Platform = platform;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets reason of the exception
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Gets or sets type of the exception (NSSomethingException,
        /// NullPointerException)
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets frames of the excetpion
        /// </summary>
        [JsonProperty(PropertyName = "frames")]
        public IList<StackFrame> Frames { get; set; }

        /// <summary>
        /// Gets or sets relevant exception (crashed)
        /// </summary>
        [JsonProperty(PropertyName = "relevant")]
        public bool? Relevant { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inner_exceptions")]
        public IList<Exception> InnerExceptions { get; set; }

        /// <summary>
        /// Gets or sets sDK/Platform this thread is beeing generated from.
        /// Possible values include: 'ios', 'android', 'xamarin',
        /// 'react-native', 'ndk', 'unity', 'other'
        /// </summary>
        [JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Frames == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Frames");
            }
            if (Frames != null)
            {
                foreach (var element in Frames)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (InnerExceptions != null)
            {
                foreach (var element1 in InnerExceptions)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
