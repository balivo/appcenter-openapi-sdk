// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A request containing information for creating a release.
    /// </summary>
    public partial class ReleaseCreateRequest
    {
        /// <summary>
        /// Initializes a new instance of the ReleaseCreateRequest class.
        /// </summary>
        public ReleaseCreateRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReleaseCreateRequest class.
        /// </summary>
        /// <param name="name">The display name of the app, extracted from the
        /// build.</param>
        /// <param name="version">The release's version.&lt;br&gt;
        /// For iOS: CFBundleVersion from info.plist.&lt;br&gt;
        /// For Android: android:versionCode from AppManifest.xml.
        /// </param>
        /// <param name="buildVersion">The release's short version.&lt;br&gt;
        /// For iOS: CFBundleShortVersionString from info.plist.&lt;br&gt;
        /// For Android: android:versionName from AppManifest.xml.
        /// </param>
        /// <param name="uniqueIdentifier">The identifier of the app's
        /// bundle.</param>
        /// <param name="minimumOsVersion">The release's minimum required
        /// operating system.</param>
        /// <param name="fingerprint">MD5 checksum of the release
        /// binary.</param>
        /// <param name="size">The release's size in bytes.</param>
        /// <param name="packageUrl">The URL to the release's binary.</param>
        /// <param name="uploadedBy">The user that uploaded the build.</param>
        /// <param name="deviceFamily">The release's device family.</param>
        /// <param name="languages">The languages supported by the
        /// release.</param>
        /// <param name="iconUrl">The URL to the release's icon.</param>
        /// <param name="ipaUuids">A list of UUIDs for architectures for an iOS
        /// app.</param>
        /// <param name="appexProvisioningProfiles">iOS app extension
        /// provisioning profiles included in the release.</param>
        public ReleaseCreateRequest(string name, string version, string buildVersion, string uniqueIdentifier, string minimumOsVersion, string fingerprint, int size, string packageUrl, string uploadedBy = default(string), string deviceFamily = default(string), IList<string> languages = default(IList<string>), string iconUrl = default(string), IList<ArchIdentifier> ipaUuids = default(IList<ArchIdentifier>), ProvisioningProfile provision = default(ProvisioningProfile), IList<ProvisioningProfile> appexProvisioningProfiles = default(IList<ProvisioningProfile>))
        {
            UploadedBy = uploadedBy;
            Name = name;
            Version = version;
            BuildVersion = buildVersion;
            UniqueIdentifier = uniqueIdentifier;
            MinimumOsVersion = minimumOsVersion;
            DeviceFamily = deviceFamily;
            Languages = languages;
            Fingerprint = fingerprint;
            Size = size;
            PackageUrl = packageUrl;
            IconUrl = iconUrl;
            IpaUuids = ipaUuids;
            Provision = provision;
            AppexProvisioningProfiles = appexProvisioningProfiles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the user that uploaded the build.
        /// </summary>
        [JsonProperty(PropertyName = "uploaded_by")]
        public string UploadedBy { get; set; }

        /// <summary>
        /// Gets or sets the display name of the app, extracted from the build.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the release's version.&amp;lt;br&amp;gt;
        /// For iOS: CFBundleVersion from info.plist.&amp;lt;br&amp;gt;
        /// For Android: android:versionCode from AppManifest.xml.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the release's short version.&amp;lt;br&amp;gt;
        /// For iOS: CFBundleShortVersionString from
        /// info.plist.&amp;lt;br&amp;gt;
        /// For Android: android:versionName from AppManifest.xml.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "build_version")]
        public string BuildVersion { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the app's bundle.
        /// </summary>
        [JsonProperty(PropertyName = "unique_identifier")]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the release's minimum required operating system.
        /// </summary>
        [JsonProperty(PropertyName = "minimum_os_version")]
        public string MinimumOsVersion { get; set; }

        /// <summary>
        /// Gets or sets the release's device family.
        /// </summary>
        [JsonProperty(PropertyName = "device_family")]
        public string DeviceFamily { get; set; }

        /// <summary>
        /// Gets or sets the languages supported by the release.
        /// </summary>
        [JsonProperty(PropertyName = "languages")]
        public IList<string> Languages { get; set; }

        /// <summary>
        /// Gets or sets MD5 checksum of the release binary.
        /// </summary>
        [JsonProperty(PropertyName = "fingerprint")]
        public string Fingerprint { get; set; }

        /// <summary>
        /// Gets or sets the release's size in bytes.
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public int Size { get; set; }

        /// <summary>
        /// Gets or sets the URL to the release's binary.
        /// </summary>
        [JsonProperty(PropertyName = "package_url")]
        public string PackageUrl { get; set; }

        /// <summary>
        /// Gets or sets the URL to the release's icon.
        /// </summary>
        [JsonProperty(PropertyName = "icon_url")]
        public string IconUrl { get; set; }

        /// <summary>
        /// Gets or sets a list of UUIDs for architectures for an iOS app.
        /// </summary>
        [JsonProperty(PropertyName = "ipa_uuids")]
        public IList<ArchIdentifier> IpaUuids { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provision")]
        public ProvisioningProfile Provision { get; set; }

        /// <summary>
        /// Gets or sets iOS app extension provisioning profiles included in
        /// the release.
        /// </summary>
        [JsonProperty(PropertyName = "appex_provisioning_profiles")]
        public IList<ProvisioningProfile> AppexProvisioningProfiles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Version == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Version");
            }
            if (BuildVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BuildVersion");
            }
            if (UniqueIdentifier == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UniqueIdentifier");
            }
            if (MinimumOsVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MinimumOsVersion");
            }
            if (Fingerprint == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Fingerprint");
            }
            if (PackageUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PackageUrl");
            }
            if (IpaUuids != null)
            {
                foreach (var element in IpaUuids)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Provision != null)
            {
                Provision.Validate();
            }
            if (AppexProvisioningProfiles != null)
            {
                foreach (var element1 in AppexProvisioningProfiles)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
