// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The branch build configuration
    /// </summary>
    public partial class BranchConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the BranchConfiguration class.
        /// </summary>
        public BranchConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BranchConfiguration class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="trigger">Possible values include: 'continous',
        /// 'continuous', 'manual'</param>
        public BranchConfiguration(int id, IDictionary<string, BranchProperties> additionalProperties = default(IDictionary<string, BranchProperties>), string trigger = default(string), bool? testsEnabled = default(bool?), bool? badgeIsEnabled = default(bool?), bool? signed = default(bool?), BranchConfigurationToolsets toolsets = default(BranchConfigurationToolsets), BranchConfigurationArtifactVersioning artifactVersioning = default(BranchConfigurationArtifactVersioning))
        {
            AdditionalProperties = additionalProperties;
            Id = id;
            Trigger = trigger;
            TestsEnabled = testsEnabled;
            BadgeIsEnabled = badgeIsEnabled;
            Signed = signed;
            Toolsets = toolsets;
            ArtifactVersioning = artifactVersioning;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, BranchProperties> AdditionalProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'continous', 'continuous',
        /// 'manual'
        /// </summary>
        [JsonProperty(PropertyName = "trigger")]
        public string Trigger { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "testsEnabled")]
        public bool? TestsEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "badgeIsEnabled")]
        public bool? BadgeIsEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "signed")]
        public bool? Signed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "toolsets")]
        public BranchConfigurationToolsets Toolsets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "artifactVersioning")]
        public BranchConfigurationArtifactVersioning ArtifactVersioning { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AdditionalProperties != null)
            {
                foreach (var valueElement in AdditionalProperties.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (Toolsets != null)
            {
                Toolsets.Validate();
            }
        }
    }
}
