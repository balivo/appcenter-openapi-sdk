// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DistributionGroupDetailsResponse : DistributionGroupResponse
    {
        /// <summary>
        /// Initializes a new instance of the DistributionGroupDetailsResponse
        /// class.
        /// </summary>
        public DistributionGroupDetailsResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DistributionGroupDetailsResponse
        /// class.
        /// </summary>
        /// <param name="id">The unique ID of the distribution group</param>
        /// <param name="name">The name of the distribution group used in
        /// URLs</param>
        /// <param name="origin">The creation origin of this distribution
        /// group. Possible values include: 'appcenter', 'hockeyapp'</param>
        /// <param name="isPublic">Whether the distribution group is
        /// public</param>
        /// <param name="isShared">Whether the distribution group is shared
        /// group or not</param>
        /// <param name="totalAppsCount">The count of apps associated with this
        /// distribution group</param>
        /// <param name="totalUserCount">The count of users in the distribution
        /// group</param>
        /// <param name="notifiedUserCount">The count of non-pending users in
        /// the distribution group who will be notified by new releases</param>
        /// <param name="users">The distribution group users</param>
        public DistributionGroupDetailsResponse(System.Guid id, string name, string origin, bool isPublic, bool isShared, double totalAppsCount, double totalUserCount, double notifiedUserCount, IList<DistributionGroupUserGetResponse> users)
            : base(id, name, origin, isPublic)
        {
            IsShared = isShared;
            TotalAppsCount = totalAppsCount;
            TotalUserCount = totalUserCount;
            NotifiedUserCount = notifiedUserCount;
            Users = users;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets whether the distribution group is shared group or not
        /// </summary>
        [JsonProperty(PropertyName = "is_shared")]
        public bool IsShared { get; set; }

        /// <summary>
        /// Gets or sets the count of apps associated with this distribution
        /// group
        /// </summary>
        [JsonProperty(PropertyName = "total_apps_count")]
        public double TotalAppsCount { get; set; }

        /// <summary>
        /// Gets or sets the count of users in the distribution group
        /// </summary>
        [JsonProperty(PropertyName = "total_user_count")]
        public double TotalUserCount { get; set; }

        /// <summary>
        /// Gets or sets the count of non-pending users in the distribution
        /// group who will be notified by new releases
        /// </summary>
        [JsonProperty(PropertyName = "notified_user_count")]
        public double NotifiedUserCount { get; set; }

        /// <summary>
        /// Gets or sets the distribution group users
        /// </summary>
        [JsonProperty(PropertyName = "users")]
        public IList<DistributionGroupUserGetResponse> Users { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Users == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Users");
            }
            if (Users != null)
            {
                foreach (var element in Users)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
