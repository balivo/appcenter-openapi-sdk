// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A response containing information pertaining to a symbol status
    /// </summary>
    public partial class SymbolStatusResponse
    {
        /// <summary>
        /// Initializes a new instance of the SymbolStatusResponse class.
        /// </summary>
        public SymbolStatusResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SymbolStatusResponse class.
        /// </summary>
        /// <param name="symbolId">The unique id for this symbol (uuid)</param>
        /// <param name="appId">The application that this symbol belongs
        /// to</param>
        /// <param name="status">Whether the symbol is ignored. Possible values
        /// include: 'available', 'ignored', 'missing'</param>
        public SymbolStatusResponse(string symbolId, string appId, string status)
        {
            SymbolId = symbolId;
            AppId = appId;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique id for this symbol (uuid)
        /// </summary>
        [JsonProperty(PropertyName = "symbol_id")]
        public string SymbolId { get; set; }

        /// <summary>
        /// Gets or sets the application that this symbol belongs to
        /// </summary>
        [JsonProperty(PropertyName = "app_id")]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or sets whether the symbol is ignored. Possible values
        /// include: 'available', 'ignored', 'missing'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SymbolId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SymbolId");
            }
            if (AppId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppId");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
        }
    }
}
