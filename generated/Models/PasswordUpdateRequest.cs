// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class PasswordUpdateRequest
    {
        /// <summary>
        /// Initializes a new instance of the PasswordUpdateRequest class.
        /// </summary>
        public PasswordUpdateRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PasswordUpdateRequest class.
        /// </summary>
        /// <param name="newPassword">The new password that will be set for the
        /// user. Needs to be at least 8 characters long and contain at least
        /// one lower- and one uppercase letter.</param>
        /// <param name="oldPassword">The old password, if needed.</param>
        public PasswordUpdateRequest(string newPassword, string oldPassword = default(string))
        {
            NewPassword = newPassword;
            OldPassword = oldPassword;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the new password that will be set for the user. Needs
        /// to be at least 8 characters long and contain at least one lower-
        /// and one uppercase letter.
        /// </summary>
        [JsonProperty(PropertyName = "new_password")]
        public string NewPassword { get; set; }

        /// <summary>
        /// Gets or sets the old password, if needed.
        /// </summary>
        [JsonProperty(PropertyName = "old_password")]
        public string OldPassword { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NewPassword == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NewPassword");
            }
        }
    }
}
