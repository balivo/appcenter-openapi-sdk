// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// List of bug tracker repositories
    /// </summary>
    public partial class AlertBugTrackerReposResult
    {
        /// <summary>
        /// Initializes a new instance of the AlertBugTrackerReposResult class.
        /// </summary>
        public AlertBugTrackerReposResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AlertBugTrackerReposResult class.
        /// </summary>
        /// <param name="repoType">Possible values include: 'github', 'vsts',
        /// 'jira'</param>
        public AlertBugTrackerReposResult(IList<AlertBugTrackerRepo> repositories, string repoType = default(string))
        {
            RepoType = repoType;
            Repositories = repositories;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'github', 'vsts', 'jira'
        /// </summary>
        [JsonProperty(PropertyName = "repo_type")]
        public string RepoType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "repositories")]
        public IList<AlertBugTrackerRepo> Repositories { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Repositories == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Repositories");
            }
            if (Repositories != null)
            {
                foreach (var element in Repositories)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
