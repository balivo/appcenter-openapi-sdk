// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Apple Certificate Secret Details
    /// </summary>
    public partial class AppleCertificateSecretDetails
    {
        /// <summary>
        /// Initializes a new instance of the AppleCertificateSecretDetails
        /// class.
        /// </summary>
        public AppleCertificateSecretDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppleCertificateSecretDetails
        /// class.
        /// </summary>
        /// <param name="base64Certificate">The certificate contents in base 64
        /// encoded string</param>
        /// <param name="password">The password for the certificate</param>
        /// <param name="displayName">The display name (CN) of the
        /// certificate</param>
        /// <param name="certificateValidityStartDate">The date-time from which
        /// the certificate is valid</param>
        /// <param name="certificateValidityEndDate">The date-time till which
        /// the certificate is valid</param>
        public AppleCertificateSecretDetails(string base64Certificate, string password, string displayName, string certificateValidityStartDate, string certificateValidityEndDate)
        {
            Base64Certificate = base64Certificate;
            Password = password;
            DisplayName = displayName;
            CertificateValidityStartDate = certificateValidityStartDate;
            CertificateValidityEndDate = certificateValidityEndDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the certificate contents in base 64 encoded string
        /// </summary>
        [JsonProperty(PropertyName = "base64Certificate")]
        public string Base64Certificate { get; set; }

        /// <summary>
        /// Gets or sets the password for the certificate
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the display name (CN) of the certificate
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the date-time from which the certificate is valid
        /// </summary>
        [JsonProperty(PropertyName = "certificateValidityStartDate")]
        public string CertificateValidityStartDate { get; set; }

        /// <summary>
        /// Gets or sets the date-time till which the certificate is valid
        /// </summary>
        [JsonProperty(PropertyName = "certificateValidityEndDate")]
        public string CertificateValidityEndDate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Base64Certificate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Base64Certificate");
            }
            if (Password == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Password");
            }
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (CertificateValidityStartDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CertificateValidityStartDate");
            }
            if (CertificateValidityEndDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CertificateValidityEndDate");
            }
        }
    }
}
