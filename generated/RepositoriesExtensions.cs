// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Repositories.
    /// </summary>
    public static partial class RepositoriesExtensions
    {
            /// <summary>
            /// Gets the repositories available from the source code host
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourceHost'>
            /// The source host. Possible values include: 'github', 'bitbucket', 'vsts'
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='vstsAccountName'>
            /// Filter repositories only for specified account and project, "vstsProjectId"
            /// is required
            /// </param>
            /// <param name='vstsProjectId'>
            /// Filter repositories only for specified account and project,
            /// "vstsAccountName" is required
            /// </param>
            /// <param name='form'>
            /// The selected form of the object. Possible values include: 'lite', 'full'
            /// </param>
            public static IList<SourceRepository> List(this IRepositories operations, string sourceHost, string ownerName, string appName, string vstsAccountName = default(string), string vstsProjectId = default(string), string form = default(string))
            {
                return operations.ListAsync(sourceHost, ownerName, appName, vstsAccountName, vstsProjectId, form).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the repositories available from the source code host
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourceHost'>
            /// The source host. Possible values include: 'github', 'bitbucket', 'vsts'
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='vstsAccountName'>
            /// Filter repositories only for specified account and project, "vstsProjectId"
            /// is required
            /// </param>
            /// <param name='vstsProjectId'>
            /// Filter repositories only for specified account and project,
            /// "vstsAccountName" is required
            /// </param>
            /// <param name='form'>
            /// The selected form of the object. Possible values include: 'lite', 'full'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SourceRepository>> ListAsync(this IRepositories operations, string sourceHost, string ownerName, string appName, string vstsAccountName = default(string), string vstsProjectId = default(string), string form = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(sourceHost, ownerName, appName, vstsAccountName, vstsProjectId, form, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
