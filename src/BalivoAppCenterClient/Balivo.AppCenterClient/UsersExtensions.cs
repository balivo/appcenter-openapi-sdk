// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Users.
    /// </summary>
    public static partial class UsersExtensions
    {
            /// <summary>
            /// Returns the user profile data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static UserProfileResponse Get(this IUsers operations)
            {
                return operations.GetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the user profile data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserProfileResponse> GetAsync(this IUsers operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the user profile and returns the updated user data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The data for the created user
            /// </param>
            public static UserProfileResponse Update(this IUsers operations, UserUpdateRequest user)
            {
                return operations.UpdateAsync(user).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the user profile and returns the updated user data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// The data for the created user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserProfileResponse> UpdateAsync(this IUsers operations, UserUpdateRequest user, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the given organization user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='userName'>
            /// The slug name of the user
            /// </param>
            /// <param name='organizationUser'>
            /// </param>
            public static OrganizationUserResponse UpdateOrgRole(this IUsers operations, string orgName, string userName, OrganizationUserPatchRequest organizationUser)
            {
                return operations.UpdateOrgRoleAsync(orgName, userName, organizationUser).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the given organization user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='userName'>
            /// The slug name of the user
            /// </param>
            /// <param name='organizationUser'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OrganizationUserResponse> UpdateOrgRoleAsync(this IUsers operations, string orgName, string userName, OrganizationUserPatchRequest organizationUser, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateOrgRoleWithHttpMessagesAsync(orgName, userName, organizationUser, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a user from an organization.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='userName'>
            /// The slug name of the user
            /// </param>
            public static void RemoveFromOrg(this IUsers operations, string orgName, string userName)
            {
                operations.RemoveFromOrgAsync(orgName, userName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a user from an organization.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='userName'>
            /// The slug name of the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveFromOrgAsync(this IUsers operations, string orgName, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveFromOrgWithHttpMessagesAsync(orgName, userName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of users that belong to an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            public static IList<OrganizationUserResponse> ListForOrg(this IUsers operations, string orgName)
            {
                return operations.ListForOrgAsync(orgName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of users that belong to an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OrganizationUserResponse>> ListForOrgAsync(this IUsers operations, string orgName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForOrgWithHttpMessagesAsync(orgName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the users associated with the app specified with the given app name
            /// which belongs to the given owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<UserProfileResponse> List(this IUsers operations, string ownerName, string appName)
            {
                return operations.ListAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the users associated with the app specified with the given app name
            /// which belongs to the given owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserProfileResponse>> ListAsync(this IUsers operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
