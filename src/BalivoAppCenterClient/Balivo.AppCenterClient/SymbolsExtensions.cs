// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Symbols.
    /// </summary>
    public static partial class SymbolsExtensions
    {
            /// <summary>
            /// Returns a particular symbol by id (uuid) for the provided application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolId'>
            /// The ID of the symbol (uuid of the symbol)
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object GetStatus(this ISymbols operations, string symbolId, string ownerName, string appName)
            {
                return operations.GetStatusAsync(symbolId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a particular symbol by id (uuid) for the provided application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolId'>
            /// The ID of the symbol (uuid of the symbol)
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetStatusAsync(this ISymbols operations, string symbolId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(symbolId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the URL to download the symbol
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolId'>
            /// The ID of the symbol (uuid of the symbol)
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object GetLocation(this ISymbols operations, string symbolId, string ownerName, string appName)
            {
                return operations.GetLocationAsync(symbolId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the URL to download the symbol
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolId'>
            /// The ID of the symbol (uuid of the symbol)
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLocationAsync(this ISymbols operations, string symbolId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLocationWithHttpMessagesAsync(symbolId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Marks a symbol by id (uuid) as ignored
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolId'>
            /// The ID of the symbol (uuid of the symbol)
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object Ignore(this ISymbols operations, string symbolId, string ownerName, string appName)
            {
                return operations.IgnoreAsync(symbolId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Marks a symbol by id (uuid) as ignored
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolId'>
            /// The ID of the symbol (uuid of the symbol)
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IgnoreAsync(this ISymbols operations, string symbolId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IgnoreWithHttpMessagesAsync(symbolId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a particular symbol by id (uuid) for the provided application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolId'>
            /// The ID of the symbol (uuid of the symbol)
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object Get(this ISymbols operations, string symbolId, string ownerName, string appName)
            {
                return operations.GetAsync(symbolId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a particular symbol by id (uuid) for the provided application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolId'>
            /// The ID of the symbol (uuid of the symbol)
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this ISymbols operations, string symbolId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(symbolId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the list of all symbols for the provided application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object List(this ISymbols operations, string ownerName, string appName)
            {
                return operations.ListAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of all symbols for the provided application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListAsync(this ISymbols operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
