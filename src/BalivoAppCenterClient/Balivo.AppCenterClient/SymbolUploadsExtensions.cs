// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SymbolUploads.
    /// </summary>
    public static partial class SymbolUploadsExtensions
    {
            /// <summary>
            /// Gets the URL to download the symbol upload
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolUploadId'>
            /// The ID of the symbol upload
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object GetLocation(this ISymbolUploads operations, string symbolUploadId, string ownerName, string appName)
            {
                return operations.GetLocationAsync(symbolUploadId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the URL to download the symbol upload
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolUploadId'>
            /// The ID of the symbol upload
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLocationAsync(this ISymbolUploads operations, string symbolUploadId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLocationWithHttpMessagesAsync(symbolUploadId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a symbol upload by id for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolUploadId'>
            /// The ID of the symbol upload
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object Get(this ISymbolUploads operations, string symbolUploadId, string ownerName, string appName)
            {
                return operations.GetAsync(symbolUploadId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a symbol upload by id for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolUploadId'>
            /// The ID of the symbol upload
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this ISymbolUploads operations, string symbolUploadId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(symbolUploadId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Commits or aborts the symbol upload process for a new set of symbols for
            /// the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolUploadId'>
            /// The ID of the symbol upload
            /// </param>
            /// <param name='body'>
            /// The symbol information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object Complete(this ISymbolUploads operations, string symbolUploadId, SymbolUploadEndRequest body, string ownerName, string appName)
            {
                return operations.CompleteAsync(symbolUploadId, body, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Commits or aborts the symbol upload process for a new set of symbols for
            /// the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolUploadId'>
            /// The ID of the symbol upload
            /// </param>
            /// <param name='body'>
            /// The symbol information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CompleteAsync(this ISymbolUploads operations, string symbolUploadId, SymbolUploadEndRequest body, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CompleteWithHttpMessagesAsync(symbolUploadId, body, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a symbol upload by id for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolUploadId'>
            /// The ID of the symbol upload
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object Delete(this ISymbolUploads operations, string symbolUploadId, string ownerName, string appName)
            {
                return operations.DeleteAsync(symbolUploadId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a symbol upload by id for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolUploadId'>
            /// The ID of the symbol upload
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this ISymbolUploads operations, string symbolUploadId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(symbolUploadId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all uploads for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return.
            /// </param>
            /// <param name='status'>
            /// Filter results by the current status of a symbol upload: * all: all states
            /// in the symbol upload process. Includes created, aborted, committed,
            /// processing, indexed and failed states * uploaded: all states after package
            /// is uploaded. Includes committed, processing, indexed and failed states *
            /// processed: symbol upload processing is completed. Includes indexed and
            /// failed states.
            /// . Possible values include: 'all', 'uploaded', 'processed'
            /// </param>
            public static object List(this ISymbolUploads operations, string ownerName, string appName, long? top = 30, string status = default(string))
            {
                return operations.ListAsync(ownerName, appName, top, status).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all uploads for the specified application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return.
            /// </param>
            /// <param name='status'>
            /// Filter results by the current status of a symbol upload: * all: all states
            /// in the symbol upload process. Includes created, aborted, committed,
            /// processing, indexed and failed states * uploaded: all states after package
            /// is uploaded. Includes committed, processing, indexed and failed states *
            /// processed: symbol upload processing is completed. Includes indexed and
            /// failed states.
            /// . Possible values include: 'all', 'uploaded', 'processed'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListAsync(this ISymbolUploads operations, string ownerName, string appName, long? top = 30, string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(ownerName, appName, top, status, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Begins the symbol upload process for a new set of symbols for the specified
            /// application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The symbol information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object Create(this ISymbolUploads operations, SymbolUploadBeginRequest body, string ownerName, string appName)
            {
                return operations.CreateAsync(body, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Begins the symbol upload process for a new set of symbols for the specified
            /// application
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The symbol information
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAsync(this ISymbolUploads operations, SymbolUploadBeginRequest body, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(body, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
