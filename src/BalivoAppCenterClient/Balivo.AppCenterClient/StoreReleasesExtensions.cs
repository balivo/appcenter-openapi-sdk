// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StoreReleases.
    /// </summary>
    public static partial class StoreReleasesExtensions
    {
            /// <summary>
            /// Return the Real time Status publishing of release from store.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='releaseId'>
            /// The id of the release
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ReleaseRealTimeStatusResponse GetRealTimeStatusByReleaseId(this IStoreReleases operations, string storeName, double releaseId, string ownerName, string appName)
            {
                return operations.GetRealTimeStatusByReleaseIdAsync(storeName, releaseId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return the Real time Status publishing of release from store.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='releaseId'>
            /// The id of the release
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReleaseRealTimeStatusResponse> GetRealTimeStatusByReleaseIdAsync(this IStoreReleases operations, string storeName, double releaseId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRealTimeStatusByReleaseIdWithHttpMessagesAsync(storeName, releaseId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return the Error Details of release which failed in publishing.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='releaseId'>
            /// The id of the release
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ReleasePublishErrorResponse GetPublishError(this IStoreReleases operations, string storeName, double releaseId, string ownerName, string appName)
            {
                return operations.GetPublishErrorAsync(storeName, releaseId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return the Error Details of release which failed in publishing.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='releaseId'>
            /// The id of the release
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReleasePublishErrorResponse> GetPublishErrorAsync(this IStoreReleases operations, string storeName, double releaseId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPublishErrorWithHttpMessagesAsync(storeName, releaseId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return releases published in a store for releaseId and storeId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='releaseId'>
            /// The name of the store
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object Get(this IStoreReleases operations, string storeName, string releaseId, string ownerName, string appName)
            {
                return operations.GetAsync(storeName, releaseId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return releases published in a store for releaseId and storeId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='releaseId'>
            /// The name of the store
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAsync(this IStoreReleases operations, string storeName, string releaseId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(storeName, releaseId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// delete the release with release Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='releaseId'>
            /// The id of the release
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void Delete(this IStoreReleases operations, string storeName, string releaseId, string ownerName, string appName)
            {
                operations.DeleteAsync(storeName, releaseId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// delete the release with release Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='releaseId'>
            /// The id of the release
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IStoreReleases operations, string storeName, string releaseId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(storeName, releaseId, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return all releases published  in a store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<StoresBasicReleaseDetails> List(this IStoreReleases operations, string storeName, string ownerName, string appName)
            {
                return operations.ListAsync(storeName, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return all releases published  in a store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StoresBasicReleaseDetails>> ListAsync(this IStoreReleases operations, string storeName, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(storeName, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the latest release published in a store.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object GetLatest(this IStoreReleases operations, string storeName, string ownerName, string appName)
            {
                return operations.GetLatestAsync(storeName, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the latest release published in a store.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='storeName'>
            /// The name of the store
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLatestAsync(this IStoreReleases operations, string storeName, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestWithHttpMessagesAsync(storeName, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
