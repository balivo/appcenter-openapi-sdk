// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Push.
    /// </summary>
    public static partial class PushExtensions
    {
            /// <summary>
            /// Returns whether push config exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void ConfigExists(this IPush operations, string ownerName, string appName)
            {
                operations.ConfigExistsAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns whether push config exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ConfigExistsAsync(this IPush operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ConfigExistsWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static NotificationConfigResult GetConfig(this IPush operations, string ownerName, string appName)
            {
                return operations.GetConfigAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NotificationConfigResult> GetConfigAsync(this IPush operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set notification configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// Notification configurations.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static NotificationConfigResult SetConfig(this IPush operations, NotificationConfig properties, string ownerName, string appName)
            {
                return operations.SetConfigAsync(properties, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set notification configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// Notification configurations.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NotificationConfigResult> SetConfigAsync(this IPush operations, NotificationConfig properties, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetConfigWithHttpMessagesAsync(properties, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete notification configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void DeleteConfig(this IPush operations, string ownerName, string appName)
            {
                operations.DeleteConfigAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete notification configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteConfigAsync(this IPush operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteConfigWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get notification details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationId'>
            /// The id of the notification.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static NotificationDetailsResult Get(this IPush operations, string notificationId, string ownerName, string appName)
            {
                return operations.GetAsync(notificationId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get notification details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationId'>
            /// The id of the notification.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NotificationDetailsResult> GetAsync(this IPush operations, string notificationId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(notificationId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of notifications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='skiptoken'>
            /// The value identifies a starting point in the collection of entities. This
            /// parameter along with limit is used to perform pagination.
            /// </param>
            /// <param name='orderby'>
            /// controls the sorting order and sorting based on which column
            /// </param>
            /// <param name='inlinecount'>
            /// Controls whether or not to include a count of all the items across all
            /// pages. Possible values include: 'allpages', 'none'
            /// </param>
            /// <param name='includeArchived'>
            /// Include arhived push notifications
            /// </param>
            public static NotificationsListResult List(this IPush operations, string ownerName, string appName, long? top = 30, string skiptoken = default(string), string orderby = "count desc", string inlinecount = default(string), bool? includeArchived = default(bool?))
            {
                return operations.ListAsync(ownerName, appName, top, skiptoken, orderby, inlinecount, includeArchived).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of notifications
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='top'>
            /// The maximum number of results to return. (0 will fetch all results)
            /// </param>
            /// <param name='skiptoken'>
            /// The value identifies a starting point in the collection of entities. This
            /// parameter along with limit is used to perform pagination.
            /// </param>
            /// <param name='orderby'>
            /// controls the sorting order and sorting based on which column
            /// </param>
            /// <param name='inlinecount'>
            /// Controls whether or not to include a count of all the items across all
            /// pages. Possible values include: 'allpages', 'none'
            /// </param>
            /// <param name='includeArchived'>
            /// Include arhived push notifications
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NotificationsListResult> ListAsync(this IPush operations, string ownerName, string appName, long? top = 30, string skiptoken = default(string), string orderby = "count desc", string inlinecount = default(string), bool? includeArchived = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(ownerName, appName, top, skiptoken, orderby, inlinecount, includeArchived, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Send notification.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// Notification specifications.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static NotificationSendSucceededResult Send(this IPush operations, NotificationDefinition properties, string ownerName, string appName)
            {
                return operations.SendAsync(properties, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send notification.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// Notification specifications.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NotificationSendSucceededResult> SendAsync(this IPush operations, NotificationDefinition properties, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendWithHttpMessagesAsync(properties, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Send notification.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationIds'>
            /// List of notification ids
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void Delete(this IPush operations, NotificationIdList notificationIds, string ownerName, string appName)
            {
                operations.DeleteAsync(notificationIds, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Send notification.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationIds'>
            /// List of notification ids
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPush operations, NotificationIdList notificationIds, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(notificationIds, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete device/installId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='installId'>
            /// device install id
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void DeleteInstallId(this IPush operations, string installId, string ownerName, string appName)
            {
                operations.DeleteInstallIdAsync(installId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete device/installId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='installId'>
            /// device install id
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteInstallIdAsync(this IPush operations, string installId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteInstallIdWithHttpMessagesAsync(installId, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get status of export operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportId'>
            /// The id of the export.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ExportStatusResult ExportDevicesStatus(this IPush operations, string exportId, string ownerName, string appName)
            {
                return operations.ExportDevicesStatusAsync(exportId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get status of export operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportId'>
            /// The id of the export.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExportStatusResult> ExportDevicesStatusAsync(this IPush operations, string exportId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportDevicesStatusWithHttpMessagesAsync(exportId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Exports information of all the devices that are using Push to an Azure Blob
            /// Storage
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// Export configurations.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ExportStartedResult ExportDevices(this IPush operations, ExportConfig properties, string ownerName, string appName)
            {
                return operations.ExportDevicesAsync(properties, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Exports information of all the devices that are using Push to an Azure Blob
            /// Storage
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// Export configurations.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExportStartedResult> ExportDevicesAsync(this IPush operations, ExportConfig properties, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportDevicesWithHttpMessagesAsync(properties, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
