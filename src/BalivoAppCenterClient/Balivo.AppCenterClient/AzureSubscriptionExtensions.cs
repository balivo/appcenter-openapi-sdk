// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AzureSubscription.
    /// </summary>
    public static partial class AzureSubscriptionExtensions
    {
            /// <summary>
            /// Returns a list of azure subscriptions for the organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            public static IList<AzureSubscriptionResponse> ListForOrg(this IAzureSubscription operations, string orgName)
            {
                return operations.ListForOrgAsync(orgName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of azure subscriptions for the organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AzureSubscriptionResponse>> ListForOrgAsync(this IAzureSubscription operations, string orgName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForOrgWithHttpMessagesAsync(orgName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of azure subscriptions for the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<AzureSubscriptionResponse> ListForUser(this IAzureSubscription operations)
            {
                return operations.ListForUserAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of azure subscriptions for the user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AzureSubscriptionResponse>> ListForUserAsync(this IAzureSubscription operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForUserWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the azure subscriptions for the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='azureSubscriptionId'>
            /// The unique ID (UUID) of the azure subscription
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void DeleteForApp(this IAzureSubscription operations, System.Guid azureSubscriptionId, string ownerName, string appName)
            {
                operations.DeleteForAppAsync(azureSubscriptionId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the azure subscriptions for the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='azureSubscriptionId'>
            /// The unique ID (UUID) of the azure subscription
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteForAppAsync(this IAzureSubscription operations, System.Guid azureSubscriptionId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteForAppWithHttpMessagesAsync(azureSubscriptionId, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of azure subscriptions for the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<AzureSubscriptionResponse> ListForApp(this IAzureSubscription operations, string ownerName, string appName)
            {
                return operations.ListForAppAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of azure subscriptions for the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AzureSubscriptionResponse>> ListForAppAsync(this IAzureSubscription operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForAppWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Link azure subscription to an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='azureSubscriptionToAppData'>
            /// The azure subscription data needed to be link to the app.
            /// </param>
            public static void LinkForApp(this IAzureSubscription operations, string ownerName, string appName, AzureSubscriptionAddToAppRequest azureSubscriptionToAppData)
            {
                operations.LinkForAppAsync(ownerName, appName, azureSubscriptionToAppData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Link azure subscription to an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='azureSubscriptionToAppData'>
            /// The azure subscription data needed to be link to the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LinkForAppAsync(this IAzureSubscription operations, string ownerName, string appName, AzureSubscriptionAddToAppRequest azureSubscriptionToAppData, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LinkForAppWithHttpMessagesAsync(ownerName, appName, azureSubscriptionToAppData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
