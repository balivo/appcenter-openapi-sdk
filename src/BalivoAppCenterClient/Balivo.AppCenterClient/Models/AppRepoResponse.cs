// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class AppRepoResponse
    {
        /// <summary>
        /// Initializes a new instance of the AppRepoResponse class.
        /// </summary>
        public AppRepoResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppRepoResponse class.
        /// </summary>
        /// <param name="id">The unique id (UUID) of the repository
        /// integration</param>
        /// <param name="appId">The unique id (UUID) of the app that this
        /// repository integration belongs to</param>
        /// <param name="repoUrl">The absolute URL of the repository</param>
        /// <param name="userId">The unique id (UUID) of the user who
        /// configured the repository</param>
        /// <param name="repoProvider">The provider of the repository. Possible
        /// values include: 'github', 'bitbucket', 'vsts'</param>
        /// <param name="installationId">Installation id from the
        /// provider</param>
        /// <param name="repoId">Repository id from the provider</param>
        public AppRepoResponse(System.Guid id, System.Guid appId, string repoUrl, System.Guid userId, string repoProvider = default(string), string installationId = default(string), string repoId = default(string))
        {
            Id = id;
            AppId = appId;
            RepoUrl = repoUrl;
            RepoProvider = repoProvider;
            UserId = userId;
            InstallationId = installationId;
            RepoId = repoId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique id (UUID) of the repository integration
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the unique id (UUID) of the app that this repository
        /// integration belongs to
        /// </summary>
        [JsonProperty(PropertyName = "app_id")]
        public System.Guid AppId { get; set; }

        /// <summary>
        /// Gets or sets the absolute URL of the repository
        /// </summary>
        [JsonProperty(PropertyName = "repo_url")]
        public string RepoUrl { get; set; }

        /// <summary>
        /// Gets or sets the provider of the repository. Possible values
        /// include: 'github', 'bitbucket', 'vsts'
        /// </summary>
        [JsonProperty(PropertyName = "repo_provider")]
        public string RepoProvider { get; set; }

        /// <summary>
        /// Gets or sets the unique id (UUID) of the user who configured the
        /// repository
        /// </summary>
        [JsonProperty(PropertyName = "user_id")]
        public System.Guid UserId { get; set; }

        /// <summary>
        /// Gets or sets installation id from the provider
        /// </summary>
        [JsonProperty(PropertyName = "installation_id")]
        public string InstallationId { get; set; }

        /// <summary>
        /// Gets or sets repository id from the provider
        /// </summary>
        [JsonProperty(PropertyName = "repo_id")]
        public string RepoId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RepoUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RepoUrl");
            }
        }
    }
}
