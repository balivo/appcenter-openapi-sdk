// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Apple credentials needed to log into the Apple Developer Portal
    /// </summary>
    public partial class AppleMutifactorLoginRequest
    {
        /// <summary>
        /// Initializes a new instance of the AppleMutifactorLoginRequest
        /// class.
        /// </summary>
        public AppleMutifactorLoginRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppleMutifactorLoginRequest
        /// class.
        /// </summary>
        /// <param name="username">The username for the Apple Developer
        /// account.</param>
        /// <param name="authcode">This is the six digit OTP used for
        /// completing the multi-factor authentication</param>
        public AppleMutifactorLoginRequest(string username, string authcode)
        {
            Username = username;
            Authcode = authcode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the username for the Apple Developer account.
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets this is the six digit OTP used for completing the
        /// multi-factor authentication
        /// </summary>
        [JsonProperty(PropertyName = "authcode")]
        public string Authcode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Username == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Username");
            }
            if (Authcode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Authcode");
            }
        }
    }
}
