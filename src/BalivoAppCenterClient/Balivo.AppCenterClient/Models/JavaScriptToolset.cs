// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class JavaScriptToolset
    {
        /// <summary>
        /// Initializes a new instance of the JavaScriptToolset class.
        /// </summary>
        public JavaScriptToolset()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JavaScriptToolset class.
        /// </summary>
        /// <param name="packageJsonPaths">Paths for detected package.json
        /// files</param>
        /// <param name="javascriptSolutions">The React Native solutions
        /// detected</param>
        public JavaScriptToolset(IList<string> packageJsonPaths, IList<JavaScriptSolution> javascriptSolutions = default(IList<JavaScriptSolution>))
        {
            PackageJsonPaths = packageJsonPaths;
            JavascriptSolutions = javascriptSolutions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets paths for detected package.json files
        /// </summary>
        [JsonProperty(PropertyName = "packageJsonPaths")]
        public IList<string> PackageJsonPaths { get; set; }

        /// <summary>
        /// Gets or sets the React Native solutions detected
        /// </summary>
        [JsonProperty(PropertyName = "javascriptSolutions")]
        public IList<JavaScriptSolution> JavascriptSolutions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PackageJsonPaths == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PackageJsonPaths");
            }
            if (JavascriptSolutions != null)
            {
                foreach (var element in JavascriptSolutions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
