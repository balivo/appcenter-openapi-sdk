// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Push installation Information.
    /// </summary>
    [Newtonsoft.Json.JsonObject("push_installation")]
    public partial class PushInstallationLogDiagnostics : LogDiagnostics
    {
        /// <summary>
        /// Initializes a new instance of the PushInstallationLogDiagnostics
        /// class.
        /// </summary>
        public PushInstallationLogDiagnostics()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PushInstallationLogDiagnostics
        /// class.
        /// </summary>
        /// <param name="timestamp">Log creation timestamp.
        /// </param>
        /// <param name="installId">Install ID.
        /// </param>
        /// <param name="pushToken">The PNS handle for this installation.
        /// </param>
        public PushInstallationLogDiagnostics(System.DateTime timestamp, System.Guid installId, DeviceDiagnostics device, string pushToken)
            : base(timestamp, installId, device)
        {
            PushToken = pushToken;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the PNS handle for this installation.
        ///
        /// </summary>
        [JsonProperty(PropertyName = "push_token")]
        public string PushToken { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (PushToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PushToken");
            }
        }
    }
}
