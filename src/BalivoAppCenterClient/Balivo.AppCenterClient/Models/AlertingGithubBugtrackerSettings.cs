// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Github bugtracker specific settings
    /// </summary>
    [Newtonsoft.Json.JsonObject("github")]
    public partial class AlertingGithubBugtrackerSettings : AlertingBugtrackerSettings
    {
        /// <summary>
        /// Initializes a new instance of the AlertingGithubBugtrackerSettings
        /// class.
        /// </summary>
        public AlertingGithubBugtrackerSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AlertingGithubBugtrackerSettings
        /// class.
        /// </summary>
        public AlertingGithubBugtrackerSettings(string ownerName, int githubRepoId, string githubRepoName, string callbackUrl = default(string), string githubLabel = default(string))
            : base(ownerName, callbackUrl)
        {
            GithubRepoId = githubRepoId;
            GithubRepoName = githubRepoName;
            GithubLabel = githubLabel;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "github_repo_id")]
        public int GithubRepoId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "github_repo_name")]
        public string GithubRepoName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "github_label")]
        public string GithubLabel { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (GithubRepoName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GithubRepoName");
            }
        }
    }
}
