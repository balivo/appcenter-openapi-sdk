// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// symbol update message
    /// </summary>
    public partial class SymbolUpdateInfo
    {
        /// <summary>
        /// Initializes a new instance of the SymbolUpdateInfo class.
        /// </summary>
        public SymbolUpdateInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SymbolUpdateInfo class.
        /// </summary>
        /// <param name="symbolId">UUID of the symbol</param>
        /// <param name="appId">application id</param>
        /// <param name="status">symbol upload status. Possible values include:
        /// 'missing', 'ignored', 'available'</param>
        public SymbolUpdateInfo(string symbolId, string appId, string status)
        {
            SymbolId = symbolId;
            AppId = appId;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets UUID of the symbol
        /// </summary>
        [JsonProperty(PropertyName = "symbol_id")]
        public string SymbolId { get; set; }

        /// <summary>
        /// Gets or sets application id
        /// </summary>
        [JsonProperty(PropertyName = "app_id")]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or sets symbol upload status. Possible values include:
        /// 'missing', 'ignored', 'available'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SymbolId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SymbolId");
            }
            if (AppId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppId");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
        }
    }
}
