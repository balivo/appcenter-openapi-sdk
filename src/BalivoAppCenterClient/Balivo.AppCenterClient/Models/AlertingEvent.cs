// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Alerting event
    /// </summary>
    public partial class AlertingEvent
    {
        /// <summary>
        /// Initializes a new instance of the AlertingEvent class.
        /// </summary>
        public AlertingEvent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AlertingEvent class.
        /// </summary>
        /// <param name="eventTimestamp">ISO 8601 date time when event was
        /// generated</param>
        /// <param name="eventId">A unique identifier for this event instance.
        /// Useful for deduplication</param>
        /// <param name="properties">Obsolete. Use emailProperties.</param>
        public AlertingEvent(string eventTimestamp, string eventId, object properties = default(object))
        {
            EventTimestamp = eventTimestamp;
            EventId = eventId;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ISO 8601 date time when event was generated
        /// </summary>
        [JsonProperty(PropertyName = "event_timestamp")]
        public string EventTimestamp { get; set; }

        /// <summary>
        /// Gets or sets a unique identifier for this event instance. Useful
        /// for deduplication
        /// </summary>
        [JsonProperty(PropertyName = "event_id")]
        public string EventId { get; set; }

        /// <summary>
        /// Gets or sets obsolete. Use emailProperties.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public object Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EventTimestamp == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EventTimestamp");
            }
            if (EventId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EventId");
            }
        }
    }
}
