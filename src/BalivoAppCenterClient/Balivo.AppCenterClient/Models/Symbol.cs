// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Symbol
    {
        /// <summary>
        /// Initializes a new instance of the Symbol class.
        /// </summary>
        public Symbol()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Symbol class.
        /// </summary>
        /// <param name="symbolId">The unique id for this symbol (uuid)</param>
        /// <param name="type">The type of the symbol for the current symbol
        /// upload. Possible values include: 'Apple', 'JavaScript', 'Breakpad',
        /// 'AndroidProguard', 'UWP'</param>
        /// <param name="appId">The application that this symbol belongs
        /// to</param>
        /// <param name="platform">The platform that this symbol is associated
        /// with</param>
        /// <param name="url">The path name of the symbol file in blob
        /// storage</param>
        /// <param name="origin">The origin of the symbol file. Possible values
        /// include: 'System', 'User'</param>
        /// <param name="alternateSymbolIds">The other symbols in the same
        /// file</param>
        /// <param name="status">Whether the symbol is ignored. Possible values
        /// include: 'available', 'ignored'</param>
        /// <param name="symbolUploadId">The id of the symbol upload this
        /// symbol belongs to.</param>
        /// <param name="version">The version number. Optional for Apple.
        /// Required for Android.</param>
        /// <param name="build">The build number. Optional for Apple. Required
        /// for Android.</param>
        public Symbol(string symbolId, string type, string appId, string platform, string url, string origin, IList<string> alternateSymbolIds, string status, string symbolUploadId, string version = default(string), string build = default(string))
        {
            SymbolId = symbolId;
            Type = type;
            AppId = appId;
            Platform = platform;
            Url = url;
            Origin = origin;
            AlternateSymbolIds = alternateSymbolIds;
            Status = status;
            Version = version;
            Build = build;
            SymbolUploadId = symbolUploadId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique id for this symbol (uuid)
        /// </summary>
        [JsonProperty(PropertyName = "symbol_id")]
        public string SymbolId { get; set; }

        /// <summary>
        /// Gets or sets the type of the symbol for the current symbol upload.
        /// Possible values include: 'Apple', 'JavaScript', 'Breakpad',
        /// 'AndroidProguard', 'UWP'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the application that this symbol belongs to
        /// </summary>
        [JsonProperty(PropertyName = "app_id")]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or sets the platform that this symbol is associated with
        /// </summary>
        [JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or sets the path name of the symbol file in blob storage
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the origin of the symbol file. Possible values
        /// include: 'System', 'User'
        /// </summary>
        [JsonProperty(PropertyName = "origin")]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or sets the other symbols in the same file
        /// </summary>
        [JsonProperty(PropertyName = "alternate_symbol_ids")]
        public IList<string> AlternateSymbolIds { get; set; }

        /// <summary>
        /// Gets or sets whether the symbol is ignored. Possible values
        /// include: 'available', 'ignored'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the version number. Optional for Apple. Required for
        /// Android.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the build number. Optional for Apple. Required for
        /// Android.
        /// </summary>
        [JsonProperty(PropertyName = "build")]
        public string Build { get; set; }

        /// <summary>
        /// Gets or sets the id of the symbol upload this symbol belongs to.
        /// </summary>
        [JsonProperty(PropertyName = "symbol_upload_id")]
        public string SymbolUploadId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SymbolId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SymbolId");
            }
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (AppId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppId");
            }
            if (Platform == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Platform");
            }
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (Origin == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Origin");
            }
            if (AlternateSymbolIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AlternateSymbolIds");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (SymbolUploadId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SymbolUploadId");
            }
        }
    }
}
