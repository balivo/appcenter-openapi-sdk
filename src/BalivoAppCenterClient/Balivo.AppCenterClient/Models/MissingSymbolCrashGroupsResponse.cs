// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// grouped by missing symbols crashes response object
    /// </summary>
    public partial class MissingSymbolCrashGroupsResponse
    {
        /// <summary>
        /// Initializes a new instance of the MissingSymbolCrashGroupsResponse
        /// class.
        /// </summary>
        public MissingSymbolCrashGroupsResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MissingSymbolCrashGroupsResponse
        /// class.
        /// </summary>
        /// <param name="totalCrashCount">total number of cashes for all the
        /// groups</param>
        /// <param name="groups">list of crash groups formed by missing symbols
        /// combination</param>
        public MissingSymbolCrashGroupsResponse(int totalCrashCount, IList<MissingSymbolCrashGroup> groups)
        {
            TotalCrashCount = totalCrashCount;
            Groups = groups;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets total number of cashes for all the groups
        /// </summary>
        [JsonProperty(PropertyName = "total_crash_count")]
        public int TotalCrashCount { get; set; }

        /// <summary>
        /// Gets or sets list of crash groups formed by missing symbols
        /// combination
        /// </summary>
        [JsonProperty(PropertyName = "groups")]
        public IList<MissingSymbolCrashGroup> Groups { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Groups == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Groups");
            }
            if (Groups != null)
            {
                foreach (var element in Groups)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
