// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A request containing information pertaining to starting a symbol upload
    /// process
    /// </summary>
    public partial class SymbolUploadBeginRequest
    {
        /// <summary>
        /// Initializes a new instance of the SymbolUploadBeginRequest class.
        /// </summary>
        public SymbolUploadBeginRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SymbolUploadBeginRequest class.
        /// </summary>
        /// <param name="symbolType">The type of the symbol for the current
        /// symbol upload. Possible values include: 'Apple', 'Breakpad',
        /// 'AndroidProguard', 'UWP'</param>
        /// <param name="clientCallback">The callback URL that the client can
        /// optionally provide to get status updates for the current symbol
        /// upload</param>
        /// <param name="fileName">The file name for the symbol upload</param>
        /// <param name="build">The build number. Optional for Apple. Required
        /// for Android.</param>
        /// <param name="version">The version number. Optional for Apple.
        /// Required for Android.</param>
        public SymbolUploadBeginRequest(string symbolType, string clientCallback = default(string), string fileName = default(string), string build = default(string), string version = default(string))
        {
            SymbolType = symbolType;
            ClientCallback = clientCallback;
            FileName = fileName;
            Build = build;
            Version = version;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the type of the symbol for the current symbol upload.
        /// Possible values include: 'Apple', 'Breakpad', 'AndroidProguard',
        /// 'UWP'
        /// </summary>
        [JsonProperty(PropertyName = "symbol_type")]
        public string SymbolType { get; set; }

        /// <summary>
        /// Gets or sets the callback URL that the client can optionally
        /// provide to get status updates for the current symbol upload
        /// </summary>
        [JsonProperty(PropertyName = "client_callback")]
        public string ClientCallback { get; set; }

        /// <summary>
        /// Gets or sets the file name for the symbol upload
        /// </summary>
        [JsonProperty(PropertyName = "file_name")]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets the build number. Optional for Apple. Required for
        /// Android.
        /// </summary>
        [JsonProperty(PropertyName = "build")]
        public string Build { get; set; }

        /// <summary>
        /// Gets or sets the version number. Optional for Apple. Required for
        /// Android.
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SymbolType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SymbolType");
            }
        }
    }
}
