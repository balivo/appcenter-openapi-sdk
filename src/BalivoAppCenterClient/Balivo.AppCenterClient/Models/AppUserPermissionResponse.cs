// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class AppUserPermissionResponse
    {
        /// <summary>
        /// Initializes a new instance of the AppUserPermissionResponse class.
        /// </summary>
        public AppUserPermissionResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AppUserPermissionResponse class.
        /// </summary>
        /// <param name="appId">The unique id (UUID) of the app</param>
        /// <param name="permissions">The permissions the user has for the
        /// app</param>
        /// <param name="userEmail">The email of the user</param>
        /// <param name="userId">The unique id (UUID) of the user</param>
        /// <param name="appOrigin">The creation origin of this app. Possible
        /// values include: 'appcenter', 'hockeyapp', 'codepush'</param>
        /// <param name="appSecret">A unique and secret key used to identify
        /// the app in communication with the ingestion endpoint for crash
        /// reporting and analytics</param>
        public AppUserPermissionResponse(System.Guid appId, IList<string> permissions, string userEmail, System.Guid userId, string appOrigin, string appSecret)
        {
            AppId = appId;
            Permissions = permissions;
            UserEmail = userEmail;
            UserId = userId;
            AppOrigin = appOrigin;
            AppSecret = appSecret;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique id (UUID) of the app
        /// </summary>
        [JsonProperty(PropertyName = "app_id")]
        public System.Guid AppId { get; set; }

        /// <summary>
        /// Gets or sets the permissions the user has for the app
        /// </summary>
        [JsonProperty(PropertyName = "permissions")]
        public IList<string> Permissions { get; set; }

        /// <summary>
        /// Gets or sets the email of the user
        /// </summary>
        [JsonProperty(PropertyName = "user_email")]
        public string UserEmail { get; set; }

        /// <summary>
        /// Gets or sets the unique id (UUID) of the user
        /// </summary>
        [JsonProperty(PropertyName = "user_id")]
        public System.Guid UserId { get; set; }

        /// <summary>
        /// Gets or sets the creation origin of this app. Possible values
        /// include: 'appcenter', 'hockeyapp', 'codepush'
        /// </summary>
        [JsonProperty(PropertyName = "app_origin")]
        public string AppOrigin { get; set; }

        /// <summary>
        /// Gets or sets a unique and secret key used to identify the app in
        /// communication with the ingestion endpoint for crash reporting and
        /// analytics
        /// </summary>
        [JsonProperty(PropertyName = "app_secret")]
        public string AppSecret { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Permissions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Permissions");
            }
            if (UserEmail == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserEmail");
            }
            if (AppOrigin == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppOrigin");
            }
            if (AppSecret == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppSecret");
            }
        }
    }
}
