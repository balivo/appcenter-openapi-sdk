// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The current device availability (registered, available and maxmimum)
    /// for iPhones, iPads, iPods and Watches from Apple Developer Portal
    /// </summary>
    public partial class AvailabilityOfDevicesResponse
    {
        /// <summary>
        /// Initializes a new instance of the AvailabilityOfDevicesResponse
        /// class.
        /// </summary>
        public AvailabilityOfDevicesResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AvailabilityOfDevicesResponse
        /// class.
        /// </summary>
        public AvailabilityOfDevicesResponse(DeviceAvailability iphones, DeviceAvailability ipads, DeviceAvailability ipods, DeviceAvailability watches)
        {
            Iphones = iphones;
            Ipads = ipads;
            Ipods = ipods;
            Watches = watches;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "iphones")]
        public DeviceAvailability Iphones { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ipads")]
        public DeviceAvailability Ipads { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ipods")]
        public DeviceAvailability Ipods { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "watches")]
        public DeviceAvailability Watches { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Iphones == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Iphones");
            }
            if (Ipads == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Ipads");
            }
            if (Ipods == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Ipods");
            }
            if (Watches == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Watches");
            }
            if (Iphones != null)
            {
                Iphones.Validate();
            }
            if (Ipads != null)
            {
                Ipads.Validate();
            }
            if (Ipods != null)
            {
                Ipods.Validate();
            }
            if (Watches != null)
            {
                Watches.Validate();
            }
        }
    }
}
