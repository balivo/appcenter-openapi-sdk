// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Test Run Statistics
    /// </summary>
    /// <remarks>
    /// Summary single test run on Xamarin Test Cloud
    /// </remarks>
    public partial class TestRunStatistics
    {
        /// <summary>
        /// Initializes a new instance of the TestRunStatistics class.
        /// </summary>
        public TestRunStatistics()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TestRunStatistics class.
        /// </summary>
        /// <param name="devices">Number of devices running the test</param>
        /// <param name="devicesFinished">Number of finished devices</param>
        /// <param name="devicesFailed">Number of failed devices</param>
        /// <param name="total">Number of tests in total</param>
        /// <param name="passed">Number of passed tests</param>
        /// <param name="failed">Number of failed tests</param>
        /// <param name="skipped">Number of skipped tests</param>
        /// <param name="peakMemory">The max amount of MB used during the test
        /// run</param>
        /// <param name="totalDeviceMinutes">The number of minutes of device
        /// time the test has been runnign</param>
        public TestRunStatistics(double? devices = default(double?), double? devicesFinished = default(double?), double? devicesFailed = default(double?), double? total = default(double?), double? passed = default(double?), double? failed = default(double?), double? skipped = default(double?), double? peakMemory = default(double?), double? totalDeviceMinutes = default(double?))
        {
            Devices = devices;
            DevicesFinished = devicesFinished;
            DevicesFailed = devicesFailed;
            Total = total;
            Passed = passed;
            Failed = failed;
            Skipped = skipped;
            PeakMemory = peakMemory;
            TotalDeviceMinutes = totalDeviceMinutes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets number of devices running the test
        /// </summary>
        [JsonProperty(PropertyName = "devices")]
        public double? Devices { get; set; }

        /// <summary>
        /// Gets or sets number of finished devices
        /// </summary>
        [JsonProperty(PropertyName = "devicesFinished")]
        public double? DevicesFinished { get; set; }

        /// <summary>
        /// Gets or sets number of failed devices
        /// </summary>
        [JsonProperty(PropertyName = "devicesFailed")]
        public double? DevicesFailed { get; set; }

        /// <summary>
        /// Gets or sets number of tests in total
        /// </summary>
        [JsonProperty(PropertyName = "total")]
        public double? Total { get; set; }

        /// <summary>
        /// Gets or sets number of passed tests
        /// </summary>
        [JsonProperty(PropertyName = "passed")]
        public double? Passed { get; set; }

        /// <summary>
        /// Gets or sets number of failed tests
        /// </summary>
        [JsonProperty(PropertyName = "failed")]
        public double? Failed { get; set; }

        /// <summary>
        /// Gets or sets number of skipped tests
        /// </summary>
        [JsonProperty(PropertyName = "skipped")]
        public double? Skipped { get; set; }

        /// <summary>
        /// Gets or sets the max amount of MB used during the test run
        /// </summary>
        [JsonProperty(PropertyName = "peakMemory")]
        public double? PeakMemory { get; set; }

        /// <summary>
        /// Gets or sets the number of minutes of device time the test has been
        /// runnign
        /// </summary>
        [JsonProperty(PropertyName = "totalDeviceMinutes")]
        public double? TotalDeviceMinutes { get; set; }

    }
}
