// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Build configuration for Android projects
    /// </summary>
    public partial class AndroidBranchConfigurationProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AndroidBranchConfigurationProperties class.
        /// </summary>
        public AndroidBranchConfigurationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// AndroidBranchConfigurationProperties class.
        /// </summary>
        /// <param name="module">The Gradle module to build</param>
        /// <param name="buildVariant">The Android build variant to
        /// build</param>
        /// <param name="gradleWrapperPath">Path to the Gradle wrapper
        /// script</param>
        /// <param name="runTests">Whether to run unit tests during the build
        /// (default)</param>
        /// <param name="runLint">Whether to run lint checks during the build
        /// (default)</param>
        /// <param name="isRoot">Whether it is the root module or not</param>
        /// <param name="automaticSigning">Whether to apply automatic signing
        /// or not</param>
        /// <param name="keystorePassword">The password of the keystore</param>
        /// <param name="keyAlias">The key alias</param>
        /// <param name="keyPassword">The key password</param>
        /// <param name="keystoreFilename">The name of the keystore
        /// file</param>
        /// <param name="keystoreEncoded">The keystore encoded value</param>
        public AndroidBranchConfigurationProperties(string module, string buildVariant, string gradleWrapperPath = default(string), bool? runTests = default(bool?), bool? runLint = default(bool?), bool? isRoot = default(bool?), bool? automaticSigning = default(bool?), string keystorePassword = default(string), string keyAlias = default(string), string keyPassword = default(string), string keystoreFilename = default(string), string keystoreEncoded = default(string))
        {
            GradleWrapperPath = gradleWrapperPath;
            Module = module;
            BuildVariant = buildVariant;
            RunTests = runTests;
            RunLint = runLint;
            IsRoot = isRoot;
            AutomaticSigning = automaticSigning;
            KeystorePassword = keystorePassword;
            KeyAlias = keyAlias;
            KeyPassword = keyPassword;
            KeystoreFilename = keystoreFilename;
            KeystoreEncoded = keystoreEncoded;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets path to the Gradle wrapper script
        /// </summary>
        [JsonProperty(PropertyName = "gradleWrapperPath")]
        public string GradleWrapperPath { get; set; }

        /// <summary>
        /// Gets or sets the Gradle module to build
        /// </summary>
        [JsonProperty(PropertyName = "module")]
        public string Module { get; set; }

        /// <summary>
        /// Gets or sets the Android build variant to build
        /// </summary>
        [JsonProperty(PropertyName = "buildVariant")]
        public string BuildVariant { get; set; }

        /// <summary>
        /// Gets or sets whether to run unit tests during the build (default)
        /// </summary>
        [JsonProperty(PropertyName = "runTests")]
        public bool? RunTests { get; set; }

        /// <summary>
        /// Gets or sets whether to run lint checks during the build (default)
        /// </summary>
        [JsonProperty(PropertyName = "runLint")]
        public bool? RunLint { get; set; }

        /// <summary>
        /// Gets or sets whether it is the root module or not
        /// </summary>
        [JsonProperty(PropertyName = "isRoot")]
        public bool? IsRoot { get; set; }

        /// <summary>
        /// Gets or sets whether to apply automatic signing or not
        /// </summary>
        [JsonProperty(PropertyName = "automaticSigning")]
        public bool? AutomaticSigning { get; set; }

        /// <summary>
        /// Gets or sets the password of the keystore
        /// </summary>
        [JsonProperty(PropertyName = "keystorePassword")]
        public string KeystorePassword { get; set; }

        /// <summary>
        /// Gets or sets the key alias
        /// </summary>
        [JsonProperty(PropertyName = "keyAlias")]
        public string KeyAlias { get; set; }

        /// <summary>
        /// Gets or sets the key password
        /// </summary>
        [JsonProperty(PropertyName = "keyPassword")]
        public string KeyPassword { get; set; }

        /// <summary>
        /// Gets or sets the name of the keystore file
        /// </summary>
        [JsonProperty(PropertyName = "keystoreFilename")]
        public string KeystoreFilename { get; set; }

        /// <summary>
        /// Gets or sets the keystore encoded value
        /// </summary>
        [JsonProperty(PropertyName = "keystoreEncoded")]
        public string KeystoreEncoded { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Module == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Module");
            }
            if (BuildVariant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BuildVariant");
            }
        }
    }
}
