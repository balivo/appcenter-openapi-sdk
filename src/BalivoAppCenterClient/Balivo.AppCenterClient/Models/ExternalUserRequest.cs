// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ExternalUserRequest
    {
        /// <summary>
        /// Initializes a new instance of the ExternalUserRequest class.
        /// </summary>
        public ExternalUserRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExternalUserRequest class.
        /// </summary>
        /// <param name="email">The email address of the user</param>
        /// <param name="appInvitation">The token of the app invitation which
        /// lead to signup</param>
        /// <param name="testerInvitation">The token of the test invitation
        /// which lead to signup</param>
        /// <param name="organizationInvitation">The token of the organization
        /// invitation which lead to signup</param>
        /// <param name="avatarUrl">The avatar URL of the user</param>
        /// <param name="displayName">The full name of the user. Might for
        /// example be first and last name</param>
        /// <param name="name">The unique name that is used to identify the
        /// user. If no explicit value is given, a default will be
        /// auto-generated from the `display_name` value</param>
        public ExternalUserRequest(string email, string appInvitation = default(string), string testerInvitation = default(string), string organizationInvitation = default(string), string avatarUrl = default(string), string displayName = default(string), string name = default(string))
        {
            AppInvitation = appInvitation;
            TesterInvitation = testerInvitation;
            OrganizationInvitation = organizationInvitation;
            AvatarUrl = avatarUrl;
            DisplayName = displayName;
            Email = email;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the token of the app invitation which lead to signup
        /// </summary>
        [JsonProperty(PropertyName = "app_invitation")]
        public string AppInvitation { get; set; }

        /// <summary>
        /// Gets or sets the token of the test invitation which lead to signup
        /// </summary>
        [JsonProperty(PropertyName = "tester_invitation")]
        public string TesterInvitation { get; set; }

        /// <summary>
        /// Gets or sets the token of the organization invitation which lead to
        /// signup
        /// </summary>
        [JsonProperty(PropertyName = "organization_invitation")]
        public string OrganizationInvitation { get; set; }

        /// <summary>
        /// Gets or sets the avatar URL of the user
        /// </summary>
        [JsonProperty(PropertyName = "avatar_url")]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Gets or sets the full name of the user. Might for example be first
        /// and last name
        /// </summary>
        [JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the email address of the user
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the unique name that is used to identify the user. If
        /// no explicit value is given, a default will be auto-generated from
        /// the `display_name` value
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
        }
    }
}
