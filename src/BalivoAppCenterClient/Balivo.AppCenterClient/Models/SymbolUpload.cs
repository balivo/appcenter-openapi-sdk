// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A single symbol upload entity
    /// </summary>
    public partial class SymbolUpload
    {
        /// <summary>
        /// Initializes a new instance of the SymbolUpload class.
        /// </summary>
        public SymbolUpload()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SymbolUpload class.
        /// </summary>
        /// <param name="symbolUploadId">The id for the current symbol
        /// upload</param>
        /// <param name="appId">The application that this symbol upload belongs
        /// to</param>
        /// <param name="status">The current status for the symbol upload.
        /// Possible values include: 'created', 'committed', 'aborted',
        /// 'processing', 'indexed', 'failed'</param>
        /// <param name="symbolType">The type of the symbol for the current
        /// symbol upload. Possible values include: 'Apple', 'Breakpad',
        /// 'AndroidProguard', 'UWP'</param>
        /// <param name="user">User information of the one who intitiated the
        /// symbol upload</param>
        /// <param name="symbolsUploaded">The symbols found in the
        /// upload</param>
        /// <param name="origin">The origin of the symbol upload. Possible
        /// values include: 'User', 'System'</param>
        /// <param name="fileName">The file name for the symbol upload</param>
        /// <param name="fileSize">The size of the file in Mebibytes</param>
        /// <param name="timestamp">When the symbol upload was committed, or
        /// last transaction time if not committed</param>
        public SymbolUpload(string symbolUploadId, string appId, string status, string symbolType, SymbolUploadUserInfo user = default(SymbolUploadUserInfo), IList<UploadedSymbolInfo> symbolsUploaded = default(IList<UploadedSymbolInfo>), string origin = default(string), string fileName = default(string), double? fileSize = default(double?), System.DateTime? timestamp = default(System.DateTime?))
        {
            SymbolUploadId = symbolUploadId;
            AppId = appId;
            User = user;
            Status = status;
            SymbolType = symbolType;
            SymbolsUploaded = symbolsUploaded;
            Origin = origin;
            FileName = fileName;
            FileSize = fileSize;
            Timestamp = timestamp;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the id for the current symbol upload
        /// </summary>
        [JsonProperty(PropertyName = "symbol_upload_id")]
        public string SymbolUploadId { get; set; }

        /// <summary>
        /// Gets or sets the application that this symbol upload belongs to
        /// </summary>
        [JsonProperty(PropertyName = "app_id")]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or sets user information of the one who intitiated the symbol
        /// upload
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public SymbolUploadUserInfo User { get; set; }

        /// <summary>
        /// Gets or sets the current status for the symbol upload. Possible
        /// values include: 'created', 'committed', 'aborted', 'processing',
        /// 'indexed', 'failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the type of the symbol for the current symbol upload.
        /// Possible values include: 'Apple', 'Breakpad', 'AndroidProguard',
        /// 'UWP'
        /// </summary>
        [JsonProperty(PropertyName = "symbol_type")]
        public string SymbolType { get; set; }

        /// <summary>
        /// Gets or sets the symbols found in the upload
        /// </summary>
        [JsonProperty(PropertyName = "symbols_uploaded")]
        public IList<UploadedSymbolInfo> SymbolsUploaded { get; set; }

        /// <summary>
        /// Gets or sets the origin of the symbol upload. Possible values
        /// include: 'User', 'System'
        /// </summary>
        [JsonProperty(PropertyName = "origin")]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or sets the file name for the symbol upload
        /// </summary>
        [JsonProperty(PropertyName = "file_name")]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets the size of the file in Mebibytes
        /// </summary>
        [JsonProperty(PropertyName = "file_size")]
        public double? FileSize { get; set; }

        /// <summary>
        /// Gets or sets when the symbol upload was committed, or last
        /// transaction time if not committed
        /// </summary>
        [JsonProperty(PropertyName = "timestamp")]
        public System.DateTime? Timestamp { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SymbolUploadId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SymbolUploadId");
            }
            if (AppId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppId");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (SymbolType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SymbolType");
            }
            if (SymbolsUploaded != null)
            {
                foreach (var element in SymbolsUploaded)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
