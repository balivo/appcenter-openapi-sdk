// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A response containing information about an iOS provisioning profile.
    /// </summary>
    public partial class ProvisioningProfileResponse
    {
        /// <summary>
        /// Initializes a new instance of the ProvisioningProfileResponse
        /// class.
        /// </summary>
        public ProvisioningProfileResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProvisioningProfileResponse
        /// class.
        /// </summary>
        /// <param name="provisioningProfileType">Possible values include:
        /// 'adhoc', 'enterprise', 'other'</param>
        /// <param name="provisioningProfileName">The name of the provisioning
        /// profile.</param>
        /// <param name="teamIdentifier">The team identifier.</param>
        /// <param name="provisioningBundleId">The bundle identifier associated
        /// with the profile.</param>
        /// <param name="appexProfiles">Array of provisioning profiles for any
        /// app extensions</param>
        public ProvisioningProfileResponse(string provisioningProfileType, IList<string> udids = default(IList<string>), string provisioningProfileName = default(string), string teamIdentifier = default(string), string provisioningBundleId = default(string), IList<ProvisioningProfileResponse> appexProfiles = default(IList<ProvisioningProfileResponse>))
        {
            ProvisioningProfileType = provisioningProfileType;
            Udids = udids;
            ProvisioningProfileName = provisioningProfileName;
            TeamIdentifier = teamIdentifier;
            ProvisioningBundleId = provisioningBundleId;
            AppexProfiles = appexProfiles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'adhoc', 'enterprise',
        /// 'other'
        /// </summary>
        [JsonProperty(PropertyName = "provisioning_profile_type")]
        public string ProvisioningProfileType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "udids")]
        public IList<string> Udids { get; set; }

        /// <summary>
        /// Gets or sets the name of the provisioning profile.
        /// </summary>
        [JsonProperty(PropertyName = "provisioning_profile_name")]
        public string ProvisioningProfileName { get; set; }

        /// <summary>
        /// Gets or sets the team identifier.
        /// </summary>
        [JsonProperty(PropertyName = "team_identifier")]
        public string TeamIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the bundle identifier associated with the profile.
        /// </summary>
        [JsonProperty(PropertyName = "provisioning_bundle_id")]
        public string ProvisioningBundleId { get; set; }

        /// <summary>
        /// Gets or sets array of provisioning profiles for any app extensions
        /// </summary>
        [JsonProperty(PropertyName = "appex_profiles")]
        public IList<ProvisioningProfileResponse> AppexProfiles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ProvisioningProfileType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProvisioningProfileType");
            }
            if (AppexProfiles != null)
            {
                foreach (var element in AppexProfiles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
