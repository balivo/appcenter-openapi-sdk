// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CodePushRelease : CodePushReleaseInfo
    {
        /// <summary>
        /// Initializes a new instance of the CodePushRelease class.
        /// </summary>
        public CodePushRelease()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CodePushRelease class.
        /// </summary>
        /// <param name="originalDeployment">Set on 'Promote'</param>
        /// <param name="originalLabel">Set on 'Promote' and 'Rollback'</param>
        /// <param name="releaseMethod">The release method is unknown if
        /// unspecified. Possible values include: 'Upload', 'Promote',
        /// 'Rollback'</param>
        public CodePushRelease(string targetBinaryRange = default(string), string description = default(string), bool? isDisabled = default(bool?), bool? isMandatory = default(bool?), int? rollout = default(int?), string label = default(string), string packageHash = default(string), string blobUrl = default(string), IDictionary<string, BlobInfo> diffPackageMap = default(IDictionary<string, BlobInfo>), string originalDeployment = default(string), string originalLabel = default(string), string releasedBy = default(string), string releaseMethod = default(string), double? size = default(double?), int? uploadTime = default(int?))
            : base(targetBinaryRange, description, isDisabled, isMandatory, rollout)
        {
            Label = label;
            PackageHash = packageHash;
            BlobUrl = blobUrl;
            DiffPackageMap = diffPackageMap;
            OriginalDeployment = originalDeployment;
            OriginalLabel = originalLabel;
            ReleasedBy = releasedBy;
            ReleaseMethod = releaseMethod;
            Size = size;
            UploadTime = uploadTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "package_hash")]
        public string PackageHash { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "blob_url")]
        public string BlobUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "diff_package_map")]
        public IDictionary<string, BlobInfo> DiffPackageMap { get; set; }

        /// <summary>
        /// Gets or sets set on 'Promote'
        /// </summary>
        [JsonProperty(PropertyName = "original_deployment")]
        public string OriginalDeployment { get; set; }

        /// <summary>
        /// Gets or sets set on 'Promote' and 'Rollback'
        /// </summary>
        [JsonProperty(PropertyName = "original_label")]
        public string OriginalLabel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "released_by")]
        public string ReleasedBy { get; set; }

        /// <summary>
        /// Gets or sets the release method is unknown if unspecified. Possible
        /// values include: 'Upload', 'Promote', 'Rollback'
        /// </summary>
        [JsonProperty(PropertyName = "release_method")]
        public string ReleaseMethod { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public double? Size { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "upload_time")]
        public int? UploadTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (DiffPackageMap != null)
            {
                foreach (var valueElement in DiffPackageMap.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
        }
    }
}
