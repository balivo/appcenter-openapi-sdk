// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of new application release
    /// </summary>
    public partial class NewAppReleaseAlertingEventAppReleaseProperties
    {
        /// <summary>
        /// Initializes a new instance of the
        /// NewAppReleaseAlertingEventAppReleaseProperties class.
        /// </summary>
        public NewAppReleaseAlertingEventAppReleaseProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// NewAppReleaseAlertingEventAppReleaseProperties class.
        /// </summary>
        /// <param name="uploadedAt">Date and time in ISO 8601 format</param>
        public NewAppReleaseAlertingEventAppReleaseProperties(string appName, string appDisplayName, string releaseId, string platform, string uploadedAt, string version, string shortVersion, int size, string bundleIdentifier, string installLink, string fingerprint = default(string), string releaseNotes = default(string), string minOs = default(string), bool? mandatoryUpdate = default(bool?), string provisioningProfileName = default(string), string provisioningProfileType = default(string), string iconLink = default(string), string distributionGroupId = default(string), bool? installable = default(bool?))
        {
            AppName = appName;
            AppDisplayName = appDisplayName;
            ReleaseId = releaseId;
            Platform = platform;
            UploadedAt = uploadedAt;
            Fingerprint = fingerprint;
            ReleaseNotes = releaseNotes;
            Version = version;
            ShortVersion = shortVersion;
            MinOs = minOs;
            MandatoryUpdate = mandatoryUpdate;
            Size = size;
            ProvisioningProfileName = provisioningProfileName;
            ProvisioningProfileType = provisioningProfileType;
            BundleIdentifier = bundleIdentifier;
            InstallLink = installLink;
            IconLink = iconLink;
            DistributionGroupId = distributionGroupId;
            Installable = installable;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "app_name")]
        public string AppName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "app_display_name")]
        public string AppDisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "release_id")]
        public string ReleaseId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "platform")]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or sets date and time in ISO 8601 format
        /// </summary>
        [JsonProperty(PropertyName = "uploaded_at")]
        public string UploadedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fingerprint")]
        public string Fingerprint { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "release_notes")]
        public string ReleaseNotes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "short_version")]
        public string ShortVersion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "min_os")]
        public string MinOs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "mandatory_update")]
        public bool? MandatoryUpdate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "size")]
        public int Size { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provisioning_profile_name")]
        public string ProvisioningProfileName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "provisioning_profile_type")]
        public string ProvisioningProfileType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "bundle_identifier")]
        public string BundleIdentifier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "install_link")]
        public string InstallLink { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "icon_link")]
        public string IconLink { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "distribution_group_id")]
        public string DistributionGroupId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "installable")]
        public bool? Installable { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AppName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppName");
            }
            if (AppDisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppDisplayName");
            }
            if (ReleaseId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReleaseId");
            }
            if (Platform == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Platform");
            }
            if (UploadedAt == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UploadedAt");
            }
            if (Version == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Version");
            }
            if (ShortVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShortVersion");
            }
            if (BundleIdentifier == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BundleIdentifier");
            }
            if (InstallLink == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "InstallLink");
            }
        }
    }
}
