// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class InternalUserSignupResponse
    {
        /// <summary>
        /// Initializes a new instance of the InternalUserSignupResponse class.
        /// </summary>
        public InternalUserSignupResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InternalUserSignupResponse class.
        /// </summary>
        /// <param name="id">The unique id (UUID) of the user</param>
        /// <param name="displayName">The full name of the user. Might for
        /// example be first and last name</param>
        /// <param name="email">The email address of the user</param>
        /// <param name="name">The unique name that is used to identify the
        /// user.</param>
        /// <param name="externalProvider">The name of the external auth
        /// provider</param>
        /// <param name="externalUserId">The user ID given by the external
        /// provider</param>
        /// <param name="status">The current status of the user record after
        /// signup. Possible values include: 'Complete',
        /// 'NeedsVerification'</param>
        public InternalUserSignupResponse(System.Guid id, string displayName, string email, string name, string externalProvider = default(string), string externalUserId = default(string), string status = default(string))
        {
            Id = id;
            DisplayName = displayName;
            Email = email;
            ExternalProvider = externalProvider;
            ExternalUserId = externalUserId;
            Name = name;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the unique id (UUID) of the user
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the full name of the user. Might for example be first
        /// and last name
        /// </summary>
        [JsonProperty(PropertyName = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the email address of the user
        /// </summary>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the name of the external auth provider
        /// </summary>
        [JsonProperty(PropertyName = "external_provider")]
        public string ExternalProvider { get; set; }

        /// <summary>
        /// Gets or sets the user ID given by the external provider
        /// </summary>
        [JsonProperty(PropertyName = "external_user_id")]
        public string ExternalUserId { get; set; }

        /// <summary>
        /// Gets or sets the unique name that is used to identify the user.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the current status of the user record after signup.
        /// Possible values include: 'Complete', 'NeedsVerification'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
