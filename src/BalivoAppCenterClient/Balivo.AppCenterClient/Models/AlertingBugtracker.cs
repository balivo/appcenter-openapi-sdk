// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Alerting bugtracker resource
    /// </summary>
    public partial class AlertingBugtracker
    {
        /// <summary>
        /// Initializes a new instance of the AlertingBugtracker class.
        /// </summary>
        public AlertingBugtracker()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AlertingBugtracker class.
        /// </summary>
        /// <param name="type">type of bugtracker. Possible values include:
        /// 'github', 'vsts', 'jira'</param>
        /// <param name="state">bugtracker state. Possible values include:
        /// 'enabled', 'disabled', 'unauthorized'</param>
        /// <param name="tokenId">ID of OAuth token</param>
        /// <param name="eventTypes">Event types enabled for bugtracker</param>
        /// <param name="crashCountThreshold">Threshold for the number of
        /// crashes at which to create a bug</param>
        public AlertingBugtracker(string type = default(string), string state = default(string), string tokenId = default(string), IList<string> eventTypes = default(IList<string>), int? crashCountThreshold = default(int?), AlertingBugtrackerSettings settings = default(AlertingBugtrackerSettings))
        {
            Type = type;
            State = state;
            TokenId = tokenId;
            EventTypes = eventTypes;
            CrashCountThreshold = crashCountThreshold;
            Settings = settings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets type of bugtracker. Possible values include: 'github',
        /// 'vsts', 'jira'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets bugtracker state. Possible values include: 'enabled',
        /// 'disabled', 'unauthorized'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets ID of OAuth token
        /// </summary>
        [JsonProperty(PropertyName = "token_id")]
        public string TokenId { get; set; }

        /// <summary>
        /// Gets or sets event types enabled for bugtracker
        /// </summary>
        [JsonProperty(PropertyName = "event_types")]
        public IList<string> EventTypes { get; set; }

        /// <summary>
        /// Gets or sets threshold for the number of crashes at which to create
        /// a bug
        /// </summary>
        [JsonProperty(PropertyName = "crash_count_threshold")]
        public int? CrashCountThreshold { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "settings")]
        public AlertingBugtrackerSettings Settings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Settings != null)
            {
                Settings.Validate();
            }
        }
    }
}
