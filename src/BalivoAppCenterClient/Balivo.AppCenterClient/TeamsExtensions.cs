// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Teams.
    /// </summary>
    public static partial class TeamsExtensions
    {
            /// <summary>
            /// Removes a user from a team that is owned by an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='userName'>
            /// The slug name of the user
            /// </param>
            public static void RemoveUser(this ITeams operations, string orgName, string teamName, string userName)
            {
                operations.RemoveUserAsync(orgName, teamName, userName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a user from a team that is owned by an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='userName'>
            /// The slug name of the user
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveUserAsync(this ITeams operations, string orgName, string teamName, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveUserWithHttpMessagesAsync(orgName, teamName, userName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns the users of a team which is owned by an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            public static TeamUserResponse GetUsers(this ITeams operations, string orgName, string teamName)
            {
                return operations.GetUsersAsync(orgName, teamName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the users of a team which is owned by an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamUserResponse> GetUsersAsync(this ITeams operations, string orgName, string teamName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(orgName, teamName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new user to a team that is owned by an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user to add to the team
            /// </param>
            public static TeamUserResponse AddUser(this ITeams operations, string orgName, string teamName, UserEmailRequest userEmail = default(UserEmailRequest))
            {
                return operations.AddUserAsync(orgName, teamName, userEmail).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new user to a team that is owned by an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='userEmail'>
            /// The email of the user to add to the team
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamUserResponse> AddUserAsync(this ITeams operations, string orgName, string teamName, UserEmailRequest userEmail = default(UserEmailRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddUserWithHttpMessagesAsync(orgName, teamName, userEmail, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the permissions the team has to the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='team'>
            /// </param>
            public static AppWithTeamPermissionsResponse UpdatePermissions(this ITeams operations, string orgName, string teamName, string appName, TeamAppUpdateRequest team = default(TeamAppUpdateRequest))
            {
                return operations.UpdatePermissionsAsync(orgName, teamName, appName, team).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the permissions the team has to the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='team'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppWithTeamPermissionsResponse> UpdatePermissionsAsync(this ITeams operations, string orgName, string teamName, string appName, TeamAppUpdateRequest team = default(TeamAppUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePermissionsWithHttpMessagesAsync(orgName, teamName, appName, team, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes an app from a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void RemoveApp(this ITeams operations, string orgName, string teamName, string appName)
            {
                operations.RemoveAppAsync(orgName, teamName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes an app from a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAppAsync(this ITeams operations, string orgName, string teamName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveAppWithHttpMessagesAsync(orgName, teamName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Adds an app to a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='app'>
            /// The name of the app to be added to the team. The app has to be owned by the
            /// organization.
            /// </param>
            public static AppWithTeamPermissionsResponse AddApp(this ITeams operations, string orgName, string teamName, AppAddRequest app)
            {
                return operations.AddAppAsync(orgName, teamName, app).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds an app to a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='app'>
            /// The name of the app to be added to the team. The app has to be owned by the
            /// organization.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppWithTeamPermissionsResponse> AddAppAsync(this ITeams operations, string orgName, string teamName, AppAddRequest app, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddAppWithHttpMessagesAsync(orgName, teamName, app, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the apps a team has access to
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            public static IList<AppWithTeamPermissionsResponse> ListApps(this ITeams operations, string orgName, string teamName)
            {
                return operations.ListAppsAsync(orgName, teamName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the apps a team has access to
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AppWithTeamPermissionsResponse>> ListAppsAsync(this ITeams operations, string orgName, string teamName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppsWithHttpMessagesAsync(orgName, teamName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the details of a single team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            public static TeamResponse GetTeam(this ITeams operations, string orgName, string teamName)
            {
                return operations.GetTeamAsync(orgName, teamName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the details of a single team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamResponse> GetTeamAsync(this ITeams operations, string orgName, string teamName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeamWithHttpMessagesAsync(orgName, teamName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a single team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            public static void Delete(this ITeams operations, string orgName, string teamName)
            {
                operations.DeleteAsync(orgName, teamName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a single team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ITeams operations, string orgName, string teamName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(orgName, teamName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates a single team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='team'>
            /// The information used to create the team
            /// </param>
            public static TeamResponse Update(this ITeams operations, string orgName, string teamName, TeamRequest team = default(TeamRequest))
            {
                return operations.UpdateAsync(orgName, teamName, team).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a single team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='teamName'>
            /// The team's name
            /// </param>
            /// <param name='team'>
            /// The information used to create the team
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TeamResponse> UpdateAsync(this ITeams operations, string orgName, string teamName, TeamRequest team = default(TeamRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(orgName, teamName, team, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the list of all teams in this org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            public static IList<TeamResponse> ListAll(this ITeams operations, string orgName)
            {
                return operations.ListAllAsync(orgName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the list of all teams in this org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TeamResponse>> ListAllAsync(this ITeams operations, string orgName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllWithHttpMessagesAsync(orgName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a team and returns it
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='team'>
            /// The information used to create the team
            /// </param>
            public static object CreateTeam(this ITeams operations, string orgName, TeamRequest team = default(TeamRequest))
            {
                return operations.CreateTeamAsync(orgName, team).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a team and returns it
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='team'>
            /// The information used to create the team
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTeamAsync(this ITeams operations, string orgName, TeamRequest team = default(TeamRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTeamWithHttpMessagesAsync(orgName, team, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
