// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MissingSymbolGroups.
    /// </summary>
    public static partial class MissingSymbolGroupsExtensions
    {
            /// <summary>
            /// Gets application level statistics for all missing symbol groups
            /// </summary>
            /// <remarks>
            /// Gets application level statistics for all missing symbol groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static MissingSymbolCrashGroupsInfoResponse Info(this IMissingSymbolGroups operations, string ownerName, string appName)
            {
                return operations.InfoAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets application level statistics for all missing symbol groups
            /// </summary>
            /// <remarks>
            /// Gets application level statistics for all missing symbol groups
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MissingSymbolCrashGroupsInfoResponse> InfoAsync(this IMissingSymbolGroups operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InfoWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets missing symbol crash group by its id
            /// </summary>
            /// <remarks>
            /// Gets missing symbol crash group by its id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolGroupId'>
            /// missing symbol crash group id
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static MissingSymbolCrashGroupsResponse Get(this IMissingSymbolGroups operations, string symbolGroupId, string ownerName, string appName)
            {
                return operations.GetAsync(symbolGroupId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets missing symbol crash group by its id
            /// </summary>
            /// <remarks>
            /// Gets missing symbol crash group by its id
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='symbolGroupId'>
            /// missing symbol crash group id
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MissingSymbolCrashGroupsResponse> GetAsync(this IMissingSymbolGroups operations, string symbolGroupId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(symbolGroupId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets top N (ordered by crash count) of crash groups by missing symbol
            /// </summary>
            /// <remarks>
            /// Gets top N (ordered by crash count) of crash groups by missing symbol
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// top N elements
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='filter'>
            /// query filter
            /// </param>
            public static MissingSymbolCrashGroupsResponse List(this IMissingSymbolGroups operations, int top, string ownerName, string appName, string filter = default(string))
            {
                return operations.ListAsync(top, ownerName, appName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets top N (ordered by crash count) of crash groups by missing symbol
            /// </summary>
            /// <remarks>
            /// Gets top N (ordered by crash count) of crash groups by missing symbol
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// top N elements
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='filter'>
            /// query filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MissingSymbolCrashGroupsResponse> ListAsync(this IMissingSymbolGroups operations, int top, string ownerName, string appName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(top, ownerName, appName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
