// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DistributionGroups.
    /// </summary>
    public static partial class DistributionGroupsExtensions
    {
            /// <summary>
            /// Returns a unique list of users including the whole organization members
            /// plus testers in any shared group of that org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            public static IList<DistributionGroupTesterGetResponse> ListAllTestersForOrg(this IDistributionGroups operations, string orgName)
            {
                return operations.ListAllTestersForOrgAsync(orgName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a unique list of users including the whole organization members
            /// plus testers in any shared group of that org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DistributionGroupTesterGetResponse>> ListAllTestersForOrgAsync(this IDistributionGroups operations, string orgName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAllTestersForOrgWithHttpMessagesAsync(orgName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of distribution groups with details for an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='appsLimit'>
            /// The max number of apps to include in the response
            /// </param>
            public static IList<OrgDistributionGroupDetailsResponse> DetailsForOrg(this IDistributionGroups operations, string orgName, double? appsLimit = default(double?))
            {
                return operations.DetailsForOrgAsync(orgName, appsLimit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of distribution groups with details for an organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='appsLimit'>
            /// The max number of apps to include in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OrgDistributionGroupDetailsResponse>> DetailsForOrgAsync(this IDistributionGroups operations, string orgName, double? appsLimit = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DetailsForOrgWithHttpMessagesAsync(orgName, appsLimit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resend shared distribution group invite notification to previously invited
            /// testers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            public static void ResendSharedInvite(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupUserRequest members)
            {
                operations.ResendSharedInviteAsync(orgName, distributionGroupName, members).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resend shared distribution group invite notification to previously invited
            /// testers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResendSharedInviteAsync(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupUserRequest members, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResendSharedInviteWithHttpMessagesAsync(orgName, distributionGroupName, members, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete apps from distribution group in an org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            public static void BulkDeleteUsers(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupUserRequest members)
            {
                operations.BulkDeleteUsersAsync(orgName, distributionGroupName, members).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete apps from distribution group in an org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BulkDeleteUsersAsync(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupUserRequest members, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BulkDeleteUsersWithHttpMessagesAsync(orgName, distributionGroupName, members, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of member in the distribution group specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            public static IList<DistributionGroupUserGetResponse> ListUsersForOrg(this IDistributionGroups operations, string orgName, string distributionGroupName)
            {
                return operations.ListUsersForOrgAsync(orgName, distributionGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of member in the distribution group specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DistributionGroupUserGetResponse>> ListUsersForOrgAsync(this IDistributionGroups operations, string orgName, string distributionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsersForOrgWithHttpMessagesAsync(orgName, distributionGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Accepts an array of user email addresses to get added to the specified
            /// group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='memberEmails'>
            /// list of user email addresses that should get added as members to the
            /// specified group
            /// </param>
            public static IList<DistributionGroupUserPostResponse> AddUsersForOrg(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupUserRequest memberEmails)
            {
                return operations.AddUsersForOrgAsync(orgName, distributionGroupName, memberEmails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Accepts an array of user email addresses to get added to the specified
            /// group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='memberEmails'>
            /// list of user email addresses that should get added as members to the
            /// specified group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DistributionGroupUserPostResponse>> AddUsersForOrgAsync(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupUserRequest memberEmails, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddUsersForOrgWithHttpMessagesAsync(orgName, distributionGroupName, memberEmails, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete apps from distribution group in an org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='apps'>
            /// The name of the apps to be deleted from the distribution group. The apps
            /// have to be owned by the organization.
            /// </param>
            public static void BulkDeleteApps(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupAppsDeleteRequest apps)
            {
                operations.BulkDeleteAppsAsync(orgName, distributionGroupName, apps).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete apps from distribution group in an org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='apps'>
            /// The name of the apps to be deleted from the distribution group. The apps
            /// have to be owned by the organization.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BulkDeleteAppsAsync(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupAppsDeleteRequest apps, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BulkDeleteAppsWithHttpMessagesAsync(orgName, distributionGroupName, apps, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get apps from a distribution group in an org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            public static IList<OrgDistributionGroupAppResponse> GetApps(this IDistributionGroups operations, string orgName, string distributionGroupName)
            {
                return operations.GetAppsAsync(orgName, distributionGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get apps from a distribution group in an org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OrgDistributionGroupAppResponse>> GetAppsAsync(this IDistributionGroups operations, string orgName, string distributionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppsWithHttpMessagesAsync(orgName, distributionGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add apps to distribution group in an org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='apps'>
            /// The name of the apps to be added to the distribution group. The apps have
            /// to be owned by the organization.
            /// </param>
            public static void AddApps(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupAppAddRequest apps)
            {
                operations.AddAppsAsync(orgName, distributionGroupName, apps).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add apps to distribution group in an org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='apps'>
            /// The name of the apps to be added to the distribution group. The apps have
            /// to be owned by the organization.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddAppsAsync(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupAppAddRequest apps, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AddAppsWithHttpMessagesAsync(orgName, distributionGroupName, apps, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a single distribution group in org for a given distribution group
            /// name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            public static DistributionGroupResponse GetForOrg(this IDistributionGroups operations, string orgName, string distributionGroupName)
            {
                return operations.GetForOrgAsync(orgName, distributionGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single distribution group in org for a given distribution group
            /// name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DistributionGroupResponse> GetForOrgAsync(this IDistributionGroups operations, string orgName, string distributionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetForOrgWithHttpMessagesAsync(orgName, distributionGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update one given distribution group name in an org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='distributionGroup'>
            /// The attributes to update for the distribution group
            /// </param>
            public static DistributionGroupResponse PatchForOrg(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupPatchRequest distributionGroup)
            {
                return operations.PatchForOrgAsync(orgName, distributionGroupName, distributionGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update one given distribution group name in an org
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='distributionGroup'>
            /// The attributes to update for the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DistributionGroupResponse> PatchForOrgAsync(this IDistributionGroups operations, string orgName, string distributionGroupName, DistributionGroupPatchRequest distributionGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchForOrgWithHttpMessagesAsync(orgName, distributionGroupName, distributionGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a single distribution group from an org with a given distribution
            /// group name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            public static void DeleteForOrg(this IDistributionGroups operations, string orgName, string distributionGroupName)
            {
                operations.DeleteForOrgAsync(orgName, distributionGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a single distribution group from an org with a given distribution
            /// group name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteForOrgAsync(this IDistributionGroups operations, string orgName, string distributionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteForOrgWithHttpMessagesAsync(orgName, distributionGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a disribution goup which can be shared across apps under an
            /// organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroup'>
            /// The attributes to update for the distribution group
            /// </param>
            public static DistributionGroupResponse CreateForOrg(this IDistributionGroups operations, string orgName, DistributionGroupRequest distributionGroup)
            {
                return operations.CreateForOrgAsync(orgName, distributionGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a disribution goup which can be shared across apps under an
            /// organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='distributionGroup'>
            /// The attributes to update for the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DistributionGroupResponse> CreateForOrgAsync(this IDistributionGroups operations, string orgName, DistributionGroupRequest distributionGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateForOrgWithHttpMessagesAsync(orgName, distributionGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of distribution groups in the org specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            public static IList<DistributionGroupResponse> ListForOrg(this IDistributionGroups operations, string orgName)
            {
                return operations.ListForOrgAsync(orgName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of distribution groups in the org specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DistributionGroupResponse>> ListForOrgAsync(this IDistributionGroups operations, string orgName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForOrgWithHttpMessagesAsync(orgName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resend distribution group app invite notification to previously invited
            /// testers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            public static void ResendInvite(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members)
            {
                operations.ResendInviteAsync(ownerName, appName, distributionGroupName, members).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resend distribution group app invite notification to previously invited
            /// testers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResendInviteAsync(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResendInviteWithHttpMessagesAsync(ownerName, appName, distributionGroupName, members, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove the users from the distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            public static IList<DistributionGroupUserDeleteResponse> RemoveUser(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members)
            {
                return operations.RemoveUserAsync(ownerName, appName, distributionGroupName, members).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove the users from the distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DistributionGroupUserDeleteResponse>> RemoveUserAsync(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RemoveUserWithHttpMessagesAsync(ownerName, appName, distributionGroupName, members, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of member details in the distribution group specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='excludePendingInvitations'>
            /// Whether to exclude pending invitations in the response
            /// </param>
            public static IList<DistributionGroupUserGetResponse> ListUsers(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = default(bool?))
            {
                return operations.ListUsersAsync(ownerName, appName, distributionGroupName, excludePendingInvitations).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of member details in the distribution group specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='excludePendingInvitations'>
            /// Whether to exclude pending invitations in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DistributionGroupUserGetResponse>> ListUsersAsync(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName, bool? excludePendingInvitations = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsersWithHttpMessagesAsync(ownerName, appName, distributionGroupName, excludePendingInvitations, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds the members to the specified distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            public static IList<DistributionGroupUserPostResponse> AddUser(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members)
            {
                return operations.AddUserAsync(ownerName, appName, distributionGroupName, members).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds the members to the specified distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='members'>
            /// The list of members to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DistributionGroupUserPostResponse>> AddUserAsync(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName, DistributionGroupUserRequest members, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddUserWithHttpMessagesAsync(ownerName, appName, distributionGroupName, members, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a single distribution group for a given distribution group name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            public static DistributionGroupResponse Get(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName)
            {
                return operations.GetAsync(ownerName, appName, distributionGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a single distribution group for a given distribution group name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DistributionGroupResponse> GetAsync(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(ownerName, appName, distributionGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the attributes of distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='distributionGroup'>
            /// The attributes to update for the distribution group
            /// </param>
            public static DistributionGroupResponse Update(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName, DistributionGroupPatchRequest distributionGroup)
            {
                return operations.UpdateAsync(ownerName, appName, distributionGroupName, distributionGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the attributes of distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='distributionGroup'>
            /// The attributes to update for the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DistributionGroupResponse> UpdateAsync(this IDistributionGroups operations, string ownerName, string appName, string distributionGroupName, DistributionGroupPatchRequest distributionGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(ownerName, appName, distributionGroupName, distributionGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            public static void Delete(this IDistributionGroups operations, string appName, string ownerName, string distributionGroupName)
            {
                operations.DeleteAsync(appName, ownerName, distributionGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a distribution group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDistributionGroups operations, string appName, string ownerName, string distributionGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(appName, ownerName, distributionGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Returns a list of distribution groups in the app specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<DistributionGroupResponse> List(this IDistributionGroups operations, string ownerName, string appName)
            {
                return operations.ListAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of distribution groups in the app specified
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DistributionGroupResponse>> ListAsync(this IDistributionGroups operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new distribution group and returns it to the caller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroup'>
            /// The attributes to update for the distribution group
            /// </param>
            public static DistributionGroupResponse Create(this IDistributionGroups operations, string ownerName, string appName, DistributionGroupRequest distributionGroup)
            {
                return operations.CreateAsync(ownerName, appName, distributionGroup).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new distribution group and returns it to the caller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='distributionGroup'>
            /// The attributes to update for the distribution group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DistributionGroupResponse> CreateAsync(this IDistributionGroups operations, string ownerName, string appName, DistributionGroupRequest distributionGroup, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(ownerName, appName, distributionGroup, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
