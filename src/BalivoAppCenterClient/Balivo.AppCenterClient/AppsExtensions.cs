// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Apps.
    /// </summary>
    public static partial class AppsExtensions
    {
            /// <summary>
            /// Creates a new app for the organization and returns it to the caller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='app'>
            /// The data for the app
            /// </param>
            public static AppResponse CreateForOrg(this IApps operations, string orgName, AppRequest app)
            {
                return operations.CreateForOrgAsync(orgName, app).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new app for the organization and returns it to the caller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='app'>
            /// The data for the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppResponse> CreateForOrgAsync(this IApps operations, string orgName, AppRequest app, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateForOrgWithHttpMessagesAsync(orgName, app, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of apps for the organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            public static IList<AppResponse> ListForOrg(this IApps operations, string orgName)
            {
                return operations.ListForOrgAsync(orgName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of apps for the organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orgName'>
            /// The organization's name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AppResponse>> ListForOrgAsync(this IApps operations, string orgName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForOrgWithHttpMessagesAsync(orgName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the user from the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='userEmail'>
            /// The user email of the user to delete
            /// </param>
            public static void RemoveUser(this IApps operations, string ownerName, string appName, string userEmail)
            {
                operations.RemoveUserAsync(ownerName, appName, userEmail).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the user from the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='userEmail'>
            /// The user email of the user to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveUserAsync(this IApps operations, string ownerName, string appName, string userEmail, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveUserWithHttpMessagesAsync(ownerName, appName, userEmail, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update user permission for the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='userEmail'>
            /// The user email of the user to patch
            /// </param>
            /// <param name='userAppPermissionsData'>
            /// The value to update the user permission for the app.
            /// </param>
            public static void UpdateUserPermissions(this IApps operations, string ownerName, string appName, string userEmail, UserAppPermissionsUpdateRequest userAppPermissionsData = default(UserAppPermissionsUpdateRequest))
            {
                operations.UpdateUserPermissionsAsync(ownerName, appName, userEmail, userAppPermissionsData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update user permission for the app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='userEmail'>
            /// The user email of the user to patch
            /// </param>
            /// <param name='userAppPermissionsData'>
            /// The value to update the user permission for the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateUserPermissionsAsync(this IApps operations, string ownerName, string appName, string userEmail, UserAppPermissionsUpdateRequest userAppPermissionsData = default(UserAppPermissionsUpdateRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateUserPermissionsWithHttpMessagesAsync(ownerName, appName, userEmail, userAppPermissionsData, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Transfers ownership of an app to a different user or organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='destinationOwnerName'>
            /// The name of the owner (user or organization) to which the app is being
            /// transferred
            /// </param>
            public static AppResponse TransferOwnership(this IApps operations, string ownerName, string appName, string destinationOwnerName)
            {
                return operations.TransferOwnershipAsync(ownerName, appName, destinationOwnerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Transfers ownership of an app to a different user or organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='destinationOwnerName'>
            /// The name of the owner (user or organization) to which the app is being
            /// transferred
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppResponse> TransferOwnershipAsync(this IApps operations, string ownerName, string appName, string destinationOwnerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TransferOwnershipWithHttpMessagesAsync(ownerName, appName, destinationOwnerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the testers associated with the app specified with the given app
            /// name which belongs to the given owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<UserProfileResponse> ListTesters(this IApps operations, string ownerName, string appName)
            {
                return operations.ListTestersAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the testers associated with the app specified with the given app
            /// name which belongs to the given owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserProfileResponse>> ListTestersAsync(this IApps operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTestersWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the details of all teams that have access to the app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            public static IList<TeamAppResponse> GetTeams(this IApps operations, string appName, string ownerName)
            {
                return operations.GetTeamsAsync(appName, ownerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the details of all teams that have access to the app.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TeamAppResponse>> GetTeamsAsync(this IApps operations, string appName, string ownerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeamsWithHttpMessagesAsync(appName, ownerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the app avatar
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='avatar'>
            /// The image for an app avatar to upload.
            /// </param>
            public static AppResponse UpdateAvatar(this IApps operations, string ownerName, string appName, string avatar = default(string))
            {
                return operations.UpdateAvatarAsync(ownerName, appName, avatar).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sets the app avatar
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='avatar'>
            /// The image for an app avatar to upload.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppResponse> UpdateAvatarAsync(this IApps operations, string ownerName, string appName, string avatar = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAvatarWithHttpMessagesAsync(ownerName, appName, avatar, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the uploaded app avatar
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static AppResponse DeleteAvatar(this IApps operations, string ownerName, string appName)
            {
                return operations.DeleteAvatarAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the uploaded app avatar
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppResponse> DeleteAvatarAsync(this IApps operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAvatarWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return a specific app with the given app name which belongs to the given
            /// owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static AppResponse Get(this IApps operations, string ownerName, string appName)
            {
                return operations.GetAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return a specific app with the given app name which belongs to the given
            /// owner.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppResponse> GetAsync(this IApps operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Partially updates a single app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='app'>
            /// The partial data for the app
            /// </param>
            public static AppResponse Update(this IApps operations, string appName, string ownerName, AppPatchRequest app = default(AppPatchRequest))
            {
                return operations.UpdateAsync(appName, ownerName, app).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Partially updates a single app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='app'>
            /// The partial data for the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppResponse> UpdateAsync(this IApps operations, string appName, string ownerName, AppPatchRequest app = default(AppPatchRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(appName, ownerName, app, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            public static void Delete(this IApps operations, string appName, string ownerName)
            {
                operations.DeleteAsync(appName, ownerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an app
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IApps operations, string appName, string ownerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(appName, ownerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a new app and returns it to the caller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='app'>
            /// The data for the app
            /// </param>
            public static AppResponse Create(this IApps operations, AppRequest app)
            {
                return operations.CreateAsync(app).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new app and returns it to the caller
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='app'>
            /// The data for the app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppResponse> CreateAsync(this IApps operations, AppRequest app, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(app, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of apps
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderBy'>
            /// The name of the attribute by which to order the response by. By default,
            /// apps are in order of creation. All results are ordered in ascending order.
            /// Possible values include: 'display_name', 'name'
            /// </param>
            public static IList<AppResponse> List(this IApps operations, string orderBy = default(string))
            {
                return operations.ListAsync(orderBy).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of apps
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderBy'>
            /// The name of the attribute by which to order the response by. By default,
            /// apps are in order of creation. All results are ordered in ascending order.
            /// Possible values include: 'display_name', 'name'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AppResponse>> ListAsync(this IApps operations, string orderBy = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(orderBy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
