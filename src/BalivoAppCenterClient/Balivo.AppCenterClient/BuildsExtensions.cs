//// <auto-generated>
//// Code generated by Microsoft (R) AutoRest Code Generator.
//// Changes may cause incorrect behavior and will be lost if the code is
//// regenerated.
//// </auto-generated>

//namespace Balivo.AppCenterClient
//{
//    using Models;
//    using System.Collections;
//    using System.Collections.Generic;
//    using System.Threading;
//    using System.Threading.Tasks;

//    /// <summary>
//    /// Extension methods for Builds.
//    /// </summary>
//    public static partial class BuildsExtensions
//    {
//            /// <summary>
//            /// Public webhook sink
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            public static void Webhook(this IBuilds operations)
//            {
//                operations.WebhookAsync().GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Public webhook sink
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task WebhookAsync(this IBuilds operations, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                (await operations.WebhookWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
//            }

//            /// <summary>
//            /// Gets the Xcode versions available to this app
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static IList<XcodeVersion> ListXcodeVersions(this IBuilds operations, string ownerName, string appName)
//            {
//                return operations.ListXcodeVersionsAsync(ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Gets the Xcode versions available to this app
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<IList<XcodeVersion>> ListXcodeVersionsAsync(this IBuilds operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.ListXcodeVersionsWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Gets the Xamarin SDK bundles available to this app
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static IList<XamarinSDKBundle> ListXamarinSDKBundles(this IBuilds operations, string ownerName, string appName)
//            {
//                return operations.ListXamarinSDKBundlesAsync(ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Gets the Xamarin SDK bundles available to this app
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<IList<XamarinSDKBundle>> ListXamarinSDKBundlesAsync(this IBuilds operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.ListXamarinSDKBundlesWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Gets the Mono versions available to this app
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static IList<MonoVersion> ListMonoVersions(this IBuilds operations, string ownerName, string appName)
//            {
//                return operations.ListMonoVersionsAsync(ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Gets the Mono versions available to this app
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<IList<MonoVersion>> ListMonoVersionsAsync(this IBuilds operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.ListMonoVersionsWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Get the build log
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='buildId'>
//            /// The build ID
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static BuildLog GetLog(this IBuilds operations, int buildId, string ownerName, string appName)
//            {
//                return operations.GetLogAsync(buildId, ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Get the build log
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='buildId'>
//            /// The build ID
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<BuildLog> GetLogAsync(this IBuilds operations, int buildId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.GetLogWithHttpMessagesAsync(buildId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Gets the download URI
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='buildId'>
//            /// The build ID
//            /// </param>
//            /// <param name='downloadType'>
//            /// The download type. Possible values include: 'build', 'symbols', 'logs'
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static DownloadContainer GetDownloadUri(this IBuilds operations, int buildId, string downloadType, string ownerName, string appName)
//            {
//                return operations.GetDownloadUriAsync(buildId, downloadType, ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Gets the download URI
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='buildId'>
//            /// The build ID
//            /// </param>
//            /// <param name='downloadType'>
//            /// The download type. Possible values include: 'build', 'symbols', 'logs'
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<DownloadContainer> GetDownloadUriAsync(this IBuilds operations, int buildId, string downloadType, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.GetDownloadUriWithHttpMessagesAsync(buildId, downloadType, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Distribute a build
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='buildId'>
//            /// The build ID
//            /// </param>
//            /// <param name='distributeInfo'>
//            /// The distribution details
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static DistributionResponse Distribute(this IBuilds operations, int buildId, DistributionRequest distributeInfo, string ownerName, string appName)
//            {
//                return operations.DistributeAsync(buildId, distributeInfo, ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Distribute a build
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='buildId'>
//            /// The build ID
//            /// </param>
//            /// <param name='distributeInfo'>
//            /// The distribution details
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<DistributionResponse> DistributeAsync(this IBuilds operations, int buildId, DistributionRequest distributeInfo, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.DistributeWithHttpMessagesAsync(buildId, distributeInfo, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Returns the build detail for the given build ID
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='buildId'>
//            /// The build ID
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static Build Get(this IBuilds operations, int buildId, string ownerName, string appName)
//            {
//                return operations.GetAsync(buildId, ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Returns the build detail for the given build ID
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='buildId'>
//            /// The build ID
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<Build> GetAsync(this IBuilds operations, int buildId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.GetWithHttpMessagesAsync(buildId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Cancels a build
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='buildId'>
//            /// The build ID
//            /// </param>
//            /// <param name='properties'>
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static Build Update(this IBuilds operations, int buildId, BuildPatch properties, string ownerName, string appName)
//            {
//                return operations.UpdateAsync(buildId, properties, ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Cancels a build
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='buildId'>
//            /// The build ID
//            /// </param>
//            /// <param name='properties'>
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<Build> UpdateAsync(this IBuilds operations, int buildId, BuildPatch properties, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.UpdateWithHttpMessagesAsync(buildId, properties, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Application specific build service status
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static BuildServiceStatus GetStatusByAppId(this IBuilds operations, string ownerName, string appName)
//            {
//                return operations.GetStatusByAppIdAsync(ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Application specific build service status
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<BuildServiceStatus> GetStatusByAppIdAsync(this IBuilds operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.GetStatusByAppIdWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Returns the projects in the repository for the branch, for all toolsets
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='branch'>
//            /// The branch name
//            /// </param>
//            /// <param name='os'>
//            /// The desired OS for the project scan; normally the same as the app OS.
//            /// Possible values include: 'iOS', 'Android', 'Windows', 'macOS'
//            /// </param>
//            /// <param name='platform'>
//            /// The desired platform for the project scan. Possible values include:
//            /// 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java', 'UWP'
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static ToolsetProjects ListToolsetProjects(this IBuilds operations, string branch, string os, string platform, string ownerName, string appName)
//            {
//                return operations.ListToolsetProjectsAsync(branch, os, platform, ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Returns the projects in the repository for the branch, for all toolsets
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='branch'>
//            /// The branch name
//            /// </param>
//            /// <param name='os'>
//            /// The desired OS for the project scan; normally the same as the app OS.
//            /// Possible values include: 'iOS', 'Android', 'Windows', 'macOS'
//            /// </param>
//            /// <param name='platform'>
//            /// The desired platform for the project scan. Possible values include:
//            /// 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java', 'UWP'
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<ToolsetProjects> ListToolsetProjectsAsync(this IBuilds operations, string branch, string os, string platform, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.ListToolsetProjectsWithHttpMessagesAsync(branch, os, platform, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Returns the list of builds for the branch
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='branch'>
//            /// The branch name
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static IList<Build> ListByBranch(this IBuilds operations, string branch, string ownerName, string appName)
//            {
//                return operations.ListByBranchAsync(branch, ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Returns the list of builds for the branch
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='branch'>
//            /// The branch name
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<IList<Build>> ListByBranchAsync(this IBuilds operations, string branch, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.ListByBranchWithHttpMessagesAsync(branch, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Create a build
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='branch'>
//            /// The branch name
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='paramsParameter'>
//            /// Parameters of the build
//            /// </param>
//            public static Build Create(this IBuilds operations, string branch, string ownerName, string appName, BuildParams paramsParameter = default(BuildParams))
//            {
//                return operations.CreateAsync(branch, ownerName, appName, paramsParameter).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Create a build
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='branch'>
//            /// The branch name
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='paramsParameter'>
//            /// Parameters of the build
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<Build> CreateAsync(this IBuilds operations, string branch, string ownerName, string appName, BuildParams paramsParameter = default(BuildParams), CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.CreateWithHttpMessagesAsync(branch, ownerName, appName, paramsParameter, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//            /// <summary>
//            /// Returns the list of Git branches for this application
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            public static IList<BranchStatus> ListBranches(this IBuilds operations, string ownerName, string appName)
//            {
//                return operations.ListBranchesAsync(ownerName, appName).GetAwaiter().GetResult();
//            }

//            /// <summary>
//            /// Returns the list of Git branches for this application
//            /// </summary>
//            /// <param name='operations'>
//            /// The operations group for this extension method.
//            /// </param>
//            /// <param name='ownerName'>
//            /// The name of the owner
//            /// </param>
//            /// <param name='appName'>
//            /// The name of the application
//            /// </param>
//            /// <param name='cancellationToken'>
//            /// The cancellation token.
//            /// </param>
//            public static async Task<IList<BranchStatus>> ListBranchesAsync(this IBuilds operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
//            {
//                using (var _result = await operations.ListBranchesWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
//                {
//                    return _result.Body;
//                }
//            }

//    }
//}
