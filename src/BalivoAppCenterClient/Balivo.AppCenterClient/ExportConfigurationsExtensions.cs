// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ExportConfigurations.
    /// </summary>
    public static partial class ExportConfigurationsExtensions
    {
            /// <summary>
            /// Enable export configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportConfigurationId'>
            /// The id of the export configuration.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void Enable(this IExportConfigurations operations, string exportConfigurationId, string ownerName, string appName)
            {
                operations.EnableAsync(exportConfigurationId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enable export configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportConfigurationId'>
            /// The id of the export configuration.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EnableAsync(this IExportConfigurations operations, string exportConfigurationId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.EnableWithHttpMessagesAsync(exportConfigurationId, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Disable export configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportConfigurationId'>
            /// The id of the export configuration.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void Disable(this IExportConfigurations operations, string exportConfigurationId, string ownerName, string appName)
            {
                operations.DisableAsync(exportConfigurationId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disable export configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportConfigurationId'>
            /// The id of the export configuration.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DisableAsync(this IExportConfigurations operations, string exportConfigurationId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DisableWithHttpMessagesAsync(exportConfigurationId, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get export configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportConfigurationId'>
            /// The id of the export configuration.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ExportConfigurationResult Get(this IExportConfigurations operations, string exportConfigurationId, string ownerName, string appName)
            {
                return operations.GetAsync(exportConfigurationId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get export configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportConfigurationId'>
            /// The id of the export configuration.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExportConfigurationResult> GetAsync(this IExportConfigurations operations, string exportConfigurationId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(exportConfigurationId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Partially update export configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportConfigurationId'>
            /// The id of the export configuration.
            /// </param>
            /// <param name='properties'>
            /// Export configurations.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ExportConfigurationResult PartialUpdate(this IExportConfigurations operations, string exportConfigurationId, ExportConfiguration properties, string ownerName, string appName)
            {
                return operations.PartialUpdateAsync(exportConfigurationId, properties, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Partially update export configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportConfigurationId'>
            /// The id of the export configuration.
            /// </param>
            /// <param name='properties'>
            /// Export configurations.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExportConfigurationResult> PartialUpdateAsync(this IExportConfigurations operations, string exportConfigurationId, ExportConfiguration properties, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PartialUpdateWithHttpMessagesAsync(exportConfigurationId, properties, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete export configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportConfigurationId'>
            /// The id of the export configuration.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static void Delete(this IExportConfigurations operations, string exportConfigurationId, string ownerName, string appName)
            {
                operations.DeleteAsync(exportConfigurationId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete export configuration.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='exportConfigurationId'>
            /// The id of the export configuration.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IExportConfigurations operations, string exportConfigurationId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(exportConfigurationId, ownerName, appName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List export configurations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ExportConfigurationListResult List(this IExportConfigurations operations, string ownerName, string appName)
            {
                return operations.ListAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List export configurations.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExportConfigurationListResult> ListAsync(this IExportConfigurations operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new export configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// Export configurations.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ExportConfigurationResult Create(this IExportConfigurations operations, ExportConfiguration properties, string ownerName, string appName)
            {
                return operations.CreateAsync(properties, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new export configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='properties'>
            /// Export configurations.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExportConfigurationResult> CreateAsync(this IExportConfigurations operations, ExportConfiguration properties, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(properties, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
