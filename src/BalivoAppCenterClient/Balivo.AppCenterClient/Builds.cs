//// <auto-generated>
//// Code generated by Microsoft (R) AutoRest Code Generator.
//// Changes may cause incorrect behavior and will be lost if the code is
//// regenerated.
//// </auto-generated>

//namespace Balivo.AppCenterClient
//{
//    using Microsoft.Rest;
//    using Models;
//    using Newtonsoft.Json;
//    using System.Collections;
//    using System.Collections.Generic;
//    using System.IO;
//    using System.Linq;
//    using System.Net;
//    using System.Net.Http;
//    using System.Threading;
//    using System.Threading.Tasks;

//    /// <summary>
//    /// Builds operations.
//    /// </summary>
//    public partial class Builds : IServiceOperations<AppCenterClient>, IBuilds
//    {
//        /// <summary>
//        /// Initializes a new instance of the Builds class.
//        /// </summary>
//        /// <param name='client'>
//        /// Reference to the service client.
//        /// </param>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        public Builds(AppCenterClient client)
//        {
//            if (client == null)
//            {
//                throw new System.ArgumentNullException("client");
//            }
//            Client = client;
//        }

//        /// <summary>
//        /// Gets a reference to the AppCenterClient
//        /// </summary>
//        public AppCenterClient Client { get; private set; }

//        /// <summary>
//        /// Public webhook sink
//        /// </summary>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="ValidationErrorResponseException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse> WebhookWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "Webhook", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/public/hooks").ToString();
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("POST");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new ValidationErrorResponseException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                try
//                {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                    ValidationErrorResponse _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ValidationErrorResponse>(_responseContent, Client.DeserializationSettings);
//                    if (_errorBody != null)
//                    {
//                        ex.Body = _errorBody;
//                    }
//                }
//                catch (JsonException)
//                {
//                    // Ignore the exception
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Gets the Xcode versions available to this app
//        /// </summary>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="ValidationErrorResponseException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<IList<XcodeVersion>>> ListXcodeVersionsWithHttpMessagesAsync(string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "ListXcodeVersions", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/xcode_versions").ToString();
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("GET");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new ValidationErrorResponseException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                try
//                {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                    ValidationErrorResponse _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ValidationErrorResponse>(_responseContent, Client.DeserializationSettings);
//                    if (_errorBody != null)
//                    {
//                        ex.Body = _errorBody;
//                    }
//                }
//                catch (JsonException)
//                {
//                    // Ignore the exception
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<IList<XcodeVersion>>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<IList<XcodeVersion>>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Gets the Xamarin SDK bundles available to this app
//        /// </summary>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="ValidationErrorResponseException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<IList<XamarinSDKBundle>>> ListXamarinSDKBundlesWithHttpMessagesAsync(string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "ListXamarinSDKBundles", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/xamarin_sdk_bundles").ToString();
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("GET");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new ValidationErrorResponseException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                try
//                {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                    ValidationErrorResponse _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ValidationErrorResponse>(_responseContent, Client.DeserializationSettings);
//                    if (_errorBody != null)
//                    {
//                        ex.Body = _errorBody;
//                    }
//                }
//                catch (JsonException)
//                {
//                    // Ignore the exception
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<IList<XamarinSDKBundle>>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<IList<XamarinSDKBundle>>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Gets the Mono versions available to this app
//        /// </summary>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="ValidationErrorResponseException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<IList<MonoVersion>>> ListMonoVersionsWithHttpMessagesAsync(string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "ListMonoVersions", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/mono_versions").ToString();
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("GET");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new ValidationErrorResponseException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                try
//                {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                    ValidationErrorResponse _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ValidationErrorResponse>(_responseContent, Client.DeserializationSettings);
//                    if (_errorBody != null)
//                    {
//                        ex.Body = _errorBody;
//                    }
//                }
//                catch (JsonException)
//                {
//                    // Ignore the exception
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<IList<MonoVersion>>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<IList<MonoVersion>>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Get the build log
//        /// </summary>
//        /// <param name='buildId'>
//        /// The build ID
//        /// </param>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="HttpOperationException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<BuildLog>> GetLogWithHttpMessagesAsync(int buildId, string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (buildId <= 0)
//            {
//                throw new ValidationException(ValidationRules.ExclusiveMinimum, "buildId", 0);
//            }
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("buildId", buildId);
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "GetLog", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs").ToString();
//            _url = _url.Replace("{build_id}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(buildId, Client.SerializationSettings).Trim('"')));
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("GET");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                if (_httpResponse.Content != null) {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                }
//                else {
//                    _responseContent = string.Empty;
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<BuildLog>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<BuildLog>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Gets the download URI
//        /// </summary>
//        /// <param name='buildId'>
//        /// The build ID
//        /// </param>
//        /// <param name='downloadType'>
//        /// The download type. Possible values include: 'build', 'symbols', 'logs'
//        /// </param>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="HttpOperationException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<DownloadContainer>> GetDownloadUriWithHttpMessagesAsync(int buildId, string downloadType, string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (buildId <= 0)
//            {
//                throw new ValidationException(ValidationRules.ExclusiveMinimum, "buildId", 0);
//            }
//            if (downloadType == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "downloadType");
//            }
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("buildId", buildId);
//                tracingParameters.Add("downloadType", downloadType);
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "GetDownloadUri", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}").ToString();
//            _url = _url.Replace("{build_id}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(buildId, Client.SerializationSettings).Trim('"')));
//            _url = _url.Replace("{download_type}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(downloadType, Client.SerializationSettings).Trim('"')));
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("GET");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                if (_httpResponse.Content != null) {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                }
//                else {
//                    _responseContent = string.Empty;
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<DownloadContainer>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<DownloadContainer>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Distribute a build
//        /// </summary>
//        /// <param name='buildId'>
//        /// The build ID
//        /// </param>
//        /// <param name='distributeInfo'>
//        /// The distribution details
//        /// </param>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="HttpOperationException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<DistributionResponse>> DistributeWithHttpMessagesAsync(int buildId, DistributionRequest distributeInfo, string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (buildId <= 0)
//            {
//                throw new ValidationException(ValidationRules.ExclusiveMinimum, "buildId", 0);
//            }
//            if (distributeInfo == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "distributeInfo");
//            }
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("buildId", buildId);
//                tracingParameters.Add("distributeInfo", distributeInfo);
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "Distribute", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute").ToString();
//            _url = _url.Replace("{build_id}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(buildId, Client.SerializationSettings).Trim('"')));
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("POST");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            if(distributeInfo != null)
//            {
//                _requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(distributeInfo, Client.SerializationSettings);
//                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
//                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
//            }
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                if (_httpResponse.Content != null) {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                }
//                else {
//                    _responseContent = string.Empty;
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<DistributionResponse>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<DistributionResponse>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Returns the build detail for the given build ID
//        /// </summary>
//        /// <param name='buildId'>
//        /// The build ID
//        /// </param>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="HttpOperationException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<Build>> GetWithHttpMessagesAsync(int buildId, string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (buildId <= 0)
//            {
//                throw new ValidationException(ValidationRules.ExclusiveMinimum, "buildId", 0);
//            }
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("buildId", buildId);
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "Get", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/builds/{build_id}").ToString();
//            _url = _url.Replace("{build_id}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(buildId, Client.SerializationSettings).Trim('"')));
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("GET");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                if (_httpResponse.Content != null) {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                }
//                else {
//                    _responseContent = string.Empty;
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<Build>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<Build>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Cancels a build
//        /// </summary>
//        /// <param name='buildId'>
//        /// The build ID
//        /// </param>
//        /// <param name='properties'>
//        /// </param>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="HttpOperationException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<Build>> UpdateWithHttpMessagesAsync(int buildId, BuildPatch properties, string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (buildId <= 0)
//            {
//                throw new ValidationException(ValidationRules.ExclusiveMinimum, "buildId", 0);
//            }
//            if (properties == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "properties");
//            }
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("buildId", buildId);
//                tracingParameters.Add("properties", properties);
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "Update", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/builds/{build_id}").ToString();
//            _url = _url.Replace("{build_id}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(buildId, Client.SerializationSettings).Trim('"')));
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("PATCH");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            if(properties != null)
//            {
//                _requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(properties, Client.SerializationSettings);
//                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
//                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
//            }
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                if (_httpResponse.Content != null) {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                }
//                else {
//                    _responseContent = string.Empty;
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<Build>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<Build>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Application specific build service status
//        /// </summary>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="HttpOperationException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<BuildServiceStatus>> GetStatusByAppIdWithHttpMessagesAsync(string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "GetStatusByAppId", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/build_service_status").ToString();
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("GET");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                if (_httpResponse.Content != null) {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                }
//                else {
//                    _responseContent = string.Empty;
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<BuildServiceStatus>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<BuildServiceStatus>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Returns the projects in the repository for the branch, for all toolsets
//        /// </summary>
//        /// <param name='branch'>
//        /// The branch name
//        /// </param>
//        /// <param name='os'>
//        /// The desired OS for the project scan; normally the same as the app OS.
//        /// Possible values include: 'iOS', 'Android', 'Windows', 'macOS'
//        /// </param>
//        /// <param name='platform'>
//        /// The desired platform for the project scan. Possible values include:
//        /// 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java', 'UWP'
//        /// </param>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="HttpOperationException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<ToolsetProjects>> ListToolsetProjectsWithHttpMessagesAsync(string branch, string os, string platform, string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (branch == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "branch");
//            }
//            if (os == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "os");
//            }
//            if (platform == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "platform");
//            }
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("branch", branch);
//                tracingParameters.Add("os", os);
//                tracingParameters.Add("platform", platform);
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "ListToolsetProjects", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects").ToString();
//            _url = _url.Replace("{branch}", System.Uri.EscapeDataString(branch));
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            List<string> _queryParameters = new List<string>();
//            if (os != null)
//            {
//                _queryParameters.Add(string.Format("os={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(os, Client.SerializationSettings).Trim('"'))));
//            }
//            if (platform != null)
//            {
//                _queryParameters.Add(string.Format("platform={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(platform, Client.SerializationSettings).Trim('"'))));
//            }
//            if (_queryParameters.Count > 0)
//            {
//                _url += "?" + string.Join("&", _queryParameters);
//            }
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("GET");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                if (_httpResponse.Content != null) {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                }
//                else {
//                    _responseContent = string.Empty;
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<ToolsetProjects>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ToolsetProjects>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Returns the list of builds for the branch
//        /// </summary>
//        /// <param name='branch'>
//        /// The branch name
//        /// </param>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="HttpOperationException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<IList<Build>>> ListByBranchWithHttpMessagesAsync(string branch, string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (branch == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "branch");
//            }
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("branch", branch);
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "ListByBranch", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds").ToString();
//            _url = _url.Replace("{branch}", System.Uri.EscapeDataString(branch));
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("GET");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                if (_httpResponse.Content != null) {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                }
//                else {
//                    _responseContent = string.Empty;
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<IList<Build>>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<IList<Build>>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Create a build
//        /// </summary>
//        /// <param name='branch'>
//        /// The branch name
//        /// </param>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='paramsParameter'>
//        /// Parameters of the build
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="HttpOperationException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<Build>> CreateWithHttpMessagesAsync(string branch, string ownerName, string appName, BuildParams paramsParameter = default(BuildParams), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (branch == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "branch");
//            }
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("branch", branch);
//                tracingParameters.Add("paramsParameter", paramsParameter);
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "Create", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds").ToString();
//            _url = _url.Replace("{branch}", System.Uri.EscapeDataString(branch));
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("POST");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            if(paramsParameter != null)
//            {
//                _requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(paramsParameter, Client.SerializationSettings);
//                _httpRequest.Content = new StringContent(_requestContent, System.Text.Encoding.UTF8);
//                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
//            }
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                if (_httpResponse.Content != null) {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                }
//                else {
//                    _responseContent = string.Empty;
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<Build>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<Build>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//        /// <summary>
//        /// Returns the list of Git branches for this application
//        /// </summary>
//        /// <param name='ownerName'>
//        /// The name of the owner
//        /// </param>
//        /// <param name='appName'>
//        /// The name of the application
//        /// </param>
//        /// <param name='customHeaders'>
//        /// Headers that will be added to request.
//        /// </param>
//        /// <param name='cancellationToken'>
//        /// The cancellation token.
//        /// </param>
//        /// <exception cref="ValidationErrorResponseException">
//        /// Thrown when the operation returned an invalid status code
//        /// </exception>
//        /// <exception cref="SerializationException">
//        /// Thrown when unable to deserialize the response
//        /// </exception>
//        /// <exception cref="ValidationException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <exception cref="System.ArgumentNullException">
//        /// Thrown when a required parameter is null
//        /// </exception>
//        /// <return>
//        /// A response object containing the response body and response headers.
//        /// </return>
//        public async Task<HttpOperationResponse<IList<BranchStatus>>> ListBranchesWithHttpMessagesAsync(string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
//        {
//            if (ownerName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "ownerName");
//            }
//            if (appName == null)
//            {
//                throw new ValidationException(ValidationRules.CannotBeNull, "appName");
//            }
//            // Tracing
//            bool _shouldTrace = ServiceClientTracing.IsEnabled;
//            string _invocationId = null;
//            if (_shouldTrace)
//            {
//                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
//                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
//                tracingParameters.Add("ownerName", ownerName);
//                tracingParameters.Add("appName", appName);
//                tracingParameters.Add("cancellationToken", cancellationToken);
//                ServiceClientTracing.Enter(_invocationId, this, "ListBranches", tracingParameters);
//            }
//            // Construct URL
//            var _baseUrl = Client.BaseUri.AbsoluteUri;
//            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v0.1/apps/{owner_name}/{app_name}/branches").ToString();
//            _url = _url.Replace("{owner_name}", System.Uri.EscapeDataString(ownerName));
//            _url = _url.Replace("{app_name}", System.Uri.EscapeDataString(appName));
//            // Create HTTP transport objects
//            var _httpRequest = new HttpRequestMessage();
//            HttpResponseMessage _httpResponse = null;
//            _httpRequest.Method = new HttpMethod("GET");
//            _httpRequest.RequestUri = new System.Uri(_url);
//            // Set Headers


//            if (customHeaders != null)
//            {
//                foreach(var _header in customHeaders)
//                {
//                    if (_httpRequest.Headers.Contains(_header.Key))
//                    {
//                        _httpRequest.Headers.Remove(_header.Key);
//                    }
//                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
//                }
//            }

//            // Serialize Request
//            string _requestContent = null;
//            // Set Credentials
//            if (Client.Credentials != null)
//            {
//                cancellationToken.ThrowIfCancellationRequested();
//                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            }
//            // Send Request
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
//            }
//            cancellationToken.ThrowIfCancellationRequested();
//            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
//            }
//            HttpStatusCode _statusCode = _httpResponse.StatusCode;
//            cancellationToken.ThrowIfCancellationRequested();
//            string _responseContent = null;
//            if ((int)_statusCode != 200)
//            {
//                var ex = new ValidationErrorResponseException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
//                try
//                {
//                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                    ValidationErrorResponse _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ValidationErrorResponse>(_responseContent, Client.DeserializationSettings);
//                    if (_errorBody != null)
//                    {
//                        ex.Body = _errorBody;
//                    }
//                }
//                catch (JsonException)
//                {
//                    // Ignore the exception
//                }
//                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
//                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
//                if (_shouldTrace)
//                {
//                    ServiceClientTracing.Error(_invocationId, ex);
//                }
//                _httpRequest.Dispose();
//                if (_httpResponse != null)
//                {
//                    _httpResponse.Dispose();
//                }
//                throw ex;
//            }
//            // Create Result
//            var _result = new HttpOperationResponse<IList<BranchStatus>>();
//            _result.Request = _httpRequest;
//            _result.Response = _httpResponse;
//            // Deserialize Response
//            if ((int)_statusCode == 200)
//            {
//                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
//                try
//                {
//                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<IList<BranchStatus>>(_responseContent, Client.DeserializationSettings);
//                }
//                catch (JsonException ex)
//                {
//                    _httpRequest.Dispose();
//                    if (_httpResponse != null)
//                    {
//                        _httpResponse.Dispose();
//                    }
//                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
//                }
//            }
//            if (_shouldTrace)
//            {
//                ServiceClientTracing.Exit(_invocationId, _result);
//            }
//            return _result;
//        }

//    }
//}
