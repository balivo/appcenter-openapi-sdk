// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Releases.
    /// </summary>
    public static partial class ReleasesExtensions
    {
            /// <summary>
            /// Return a list of releases for a app a tester has access to.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<TesterAppRelease> ListTester(this IReleases operations, string ownerName, string appName)
            {
                return operations.ListTesterAsync(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return a list of releases for a app a tester has access to.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TesterAppRelease>> ListTesterAsync(this IReleases operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTesterWithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return a list of applications that the user has tester permission to with
            /// the latest release for each.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TesterAppWithReleaseResponse> ListLatest(this IReleases operations)
            {
                return operations.ListLatestAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return a list of applications that the user has tester permission to with
            /// the latest release for each.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TesterAppWithReleaseResponse>> ListLatestAsync(this IReleases operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListLatestWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a release with hash 'release_hash' or the 'latest' from all the
            /// distribution groups assigned to the current user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appSecret'>
            /// The secret of the target application
            /// </param>
            /// <param name='releaseHash'>
            /// The hash of the release or 'latest' to get the latest release from all the
            /// distribution groups assigned to the current user.
            /// </param>
            /// <param name='udid'>
            /// When passing `udid` in the query string, a provisioning check for the given
            /// device ID will be done. Will be ignored for non-iOS platforms.
            /// </param>
            public static object GetLatestByHash(this IReleases operations, string appSecret, string releaseHash, string udid = default(string))
            {
                return operations.GetLatestByHashAsync(appSecret, releaseHash, udid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a release with hash 'release_hash' or the 'latest' from all the
            /// distribution groups assigned to the current user.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appSecret'>
            /// The secret of the target application
            /// </param>
            /// <param name='releaseHash'>
            /// The hash of the release or 'latest' to get the latest release from all the
            /// distribution groups assigned to the current user.
            /// </param>
            /// <param name='udid'>
            /// When passing `udid` in the query string, a provisioning check for the given
            /// device ID will be done. Will be ignored for non-iOS platforms.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLatestByHashAsync(this IReleases operations, string appSecret, string releaseHash, string udid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestByHashWithHttpMessagesAsync(appSecret, releaseHash, udid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a release with 'latest' for the given public group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appSecret'>
            /// The secret of the target application
            /// </param>
            /// <param name='distributionGroupId'>
            /// the id for destination
            /// </param>
            public static object GetLatestByPublicDistributionGroup(this IReleases operations, string appSecret, string distributionGroupId)
            {
                return operations.GetLatestByPublicDistributionGroupAsync(appSecret, distributionGroupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a release with 'latest' for the given public group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appSecret'>
            /// The secret of the target application
            /// </param>
            /// <param name='distributionGroupId'>
            /// the id for destination
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLatestByPublicDistributionGroupAsync(this IReleases operations, string appSecret, string distributionGroupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestByPublicDistributionGroupWithHttpMessagesAsync(appSecret, distributionGroupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the manifest.plist in XML format for installing the release on a
            /// device. Only available for iOS.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// The ID of the application
            /// </param>
            /// <param name='releaseId'>
            /// The release_id
            /// </param>
            /// <param name='token'>
            /// A hash that authorizes the download if it matches the release info.
            /// </param>
            public static ErrorDetails GetIosManifest(this IReleases operations, string appId, int releaseId, string token)
            {
                return operations.GetIosManifestAsync(appId, releaseId, token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the manifest.plist in XML format for installing the release on a
            /// device. Only available for iOS.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appId'>
            /// The ID of the application
            /// </param>
            /// <param name='releaseId'>
            /// The release_id
            /// </param>
            /// <param name='token'>
            /// A hash that authorizes the download if it matches the release info.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorDetails> GetIosManifestAsync(this IReleases operations, string appId, int releaseId, string token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIosManifestWithHttpMessagesAsync(appId, releaseId, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a release with id `release_id`. If `release_id` is `latest`, return the
            /// latest release that was distributed to the current user (from all the
            /// distribution groups).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release, or `latest` to get the latest release from all the
            /// distribution groups assigned to the current user.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='udid'>
            /// when supplied, this call will also check if the given UDID is provisioned.
            /// Will be ignored for non-iOS platforms. The value will be returned in the
            /// property is_udid_provisioned.
            /// </param>
            public static object GetLatestByUser(this IReleases operations, string releaseId, string ownerName, string appName, string udid = default(string))
            {
                return operations.GetLatestByUserAsync(releaseId, ownerName, appName, udid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a release with id `release_id`. If `release_id` is `latest`, return the
            /// latest release that was distributed to the current user (from all the
            /// distribution groups).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release, or `latest` to get the latest release from all the
            /// distribution groups assigned to the current user.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='udid'>
            /// when supplied, this call will also check if the given UDID is provisioned.
            /// Will be ignored for non-iOS platforms. The value will be returned in the
            /// property is_udid_provisioned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLatestByUserAsync(this IReleases operations, string releaseId, string ownerName, string appName, string udid = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestByUserWithHttpMessagesAsync(releaseId, ownerName, appName, udid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a release.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release
            /// </param>
            /// <param name='body'>
            /// The release information.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object Update(this IReleases operations, int releaseId, ReleaseUpdateRequest body, string ownerName, string appName)
            {
                return operations.UpdateAsync(releaseId, body, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a release.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release
            /// </param>
            /// <param name='body'>
            /// The release information.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateAsync(this IReleases operations, int releaseId, ReleaseUpdateRequest body, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(releaseId, body, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a release.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static ErrorDetails Delete(this IReleases operations, int releaseId, string ownerName, string appName)
            {
                return operations.DeleteAsync(releaseId, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a release.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='releaseId'>
            /// The ID of the release
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorDetails> DeleteAsync(this IReleases operations, int releaseId, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(releaseId, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return detailed information about releases avaiable to a tester.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='publishedOnly'>
            /// when *true*, filters out releases that were uploaded but were never
            /// distributed. Releases that under deleted distribution groups will not be
            /// filtered out.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static IList<BasicReleaseDetailsResponse> AvailableToTester(this IReleases operations, string ownerName, string appName, bool? publishedOnly = default(bool?))
            {
                return operations.AvailableToTesterAsync(ownerName, appName, publishedOnly).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return detailed information about releases avaiable to a tester.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='publishedOnly'>
            /// when *true*, filters out releases that were uploaded but were never
            /// distributed. Releases that under deleted distribution groups will not be
            /// filtered out.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<IList<BasicReleaseDetailsResponse>> AvailableToTesterAsync(this IReleases operations, string ownerName, string appName, bool? publishedOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AvailableToTesterWithHttpMessagesAsync(ownerName, appName, publishedOnly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return basic information about releases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='publishedOnly'>
            /// when *true*, filters out releases that were uploaded but were never
            /// distributed. Releases that under deleted distribution groups will not be
            /// filtered out.
            /// </param>
            public static IList<BasicReleaseDetailsResponse> List(this IReleases operations, string ownerName, string appName, bool? publishedOnly = default(bool?))
            {
                return operations.ListAsync(ownerName, appName, publishedOnly).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return basic information about releases.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='publishedOnly'>
            /// when *true*, filters out releases that were uploaded but were never
            /// distributed. Releases that under deleted distribution groups will not be
            /// filtered out.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BasicReleaseDetailsResponse>> ListAsync(this IReleases operations, string ownerName, string appName, bool? publishedOnly = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(ownerName, appName, publishedOnly, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the latest release from every distribution group associated with an
            /// application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static IList<BasicReleaseDetailsResponse> ListLatest1(this IReleases operations, string ownerName, string appName)
            {
                return operations.ListLatest1Async(ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the latest release from every distribution group associated with an
            /// application.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BasicReleaseDetailsResponse>> ListLatest1Async(this IReleases operations, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListLatest1WithHttpMessagesAsync(ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return detailed information about a distributed release in a given
            /// distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the app owner
            /// </param>
            /// <param name='appName'>
            /// The name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='releaseId'>
            /// Only supports the constant `latest`, specific IDs are not supported.
            /// `latest` will return the latest release in the distribution group.
            /// </param>
            public static object GetLatestByDistributionGroup(this IReleases operations, string ownerName, string appName, string distributionGroupName, string releaseId)
            {
                return operations.GetLatestByDistributionGroupAsync(ownerName, appName, distributionGroupName, releaseId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return detailed information about a distributed release in a given
            /// distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the app owner
            /// </param>
            /// <param name='appName'>
            /// The name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='releaseId'>
            /// Only supports the constant `latest`, specific IDs are not supported.
            /// `latest` will return the latest release in the distribution group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLatestByDistributionGroupAsync(this IReleases operations, string ownerName, string appName, string distributionGroupName, string releaseId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestByDistributionGroupWithHttpMessagesAsync(ownerName, appName, distributionGroupName, releaseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a release with id 'release_id' in a given distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the app owner
            /// </param>
            /// <param name='appName'>
            /// The name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='releaseId'>
            /// The ID identifying the unique release.
            /// </param>
            public static ErrorDetails DeleteWithDistributionGroupId(this IReleases operations, string ownerName, string appName, string distributionGroupName, int releaseId)
            {
                return operations.DeleteWithDistributionGroupIdAsync(ownerName, appName, distributionGroupName, releaseId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a release with id 'release_id' in a given distribution group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the app owner
            /// </param>
            /// <param name='appName'>
            /// The name of the app
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='releaseId'>
            /// The ID identifying the unique release.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorDetails> DeleteWithDistributionGroupIdAsync(this IReleases operations, string ownerName, string appName, string distributionGroupName, int releaseId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithDistributionGroupIdWithHttpMessagesAsync(ownerName, appName, distributionGroupName, releaseId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return basic information about distributed releases in a given distribution
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            public static object ListByDistributionGroup(this IReleases operations, string distributionGroupName, string ownerName, string appName)
            {
                return operations.ListByDistributionGroupAsync(distributionGroupName, ownerName, appName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return basic information about distributed releases in a given distribution
            /// group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='distributionGroupName'>
            /// The name of the distribution group.
            /// </param>
            /// <param name='ownerName'>
            /// The name of the owner
            /// </param>
            /// <param name='appName'>
            /// The name of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListByDistributionGroupAsync(this IReleases operations, string distributionGroupName, string ownerName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByDistributionGroupWithHttpMessagesAsync(distributionGroupName, ownerName, appName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
