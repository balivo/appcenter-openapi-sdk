// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Balivo.AppCenterClient
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// CrashGroups operations.
    /// </summary>
    public partial interface ICrashGroups
    {
        /// <summary>
        /// Gets a stacktrace for a specific crash
        /// </summary>
        /// <param name='crashGroupId'>
        /// id of a specific group
        /// </param>
        /// <param name='ownerName'>
        /// The name of the owner
        /// </param>
        /// <param name='appName'>
        /// The name of the application
        /// </param>
        /// <param name='groupingOnly'>
        /// true if the stacktrace should be only the relevant thread /
        /// exception. Default is false
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="FailureException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<Stacktrace>> GetStacktraceWithHttpMessagesAsync(string crashGroupId, string ownerName, string appName, bool? groupingOnly = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a specific group
        /// </summary>
        /// <param name='crashGroupId'>
        /// id of a specific group
        /// </param>
        /// <param name='ownerName'>
        /// The name of the owner
        /// </param>
        /// <param name='appName'>
        /// The name of the application
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="FailureException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<CrashGroup>> GetWithHttpMessagesAsync(string crashGroupId, string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Updates a group
        /// </summary>
        /// <param name='crashGroupId'>
        /// id of a specific group
        /// </param>
        /// <param name='group'>
        /// Group change object. All fields are optional and only provided
        /// fields will get updated.
        /// </param>
        /// <param name='ownerName'>
        /// The name of the owner
        /// </param>
        /// <param name='appName'>
        /// The name of the application
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="FailureException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<CrashGroup>> UpdateWithHttpMessagesAsync(string crashGroupId, CrashGroupChange group, string ownerName, string appName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets a list of crash groups and whether the list contains all
        /// available groups.
        /// </summary>
        /// <remarks>
        /// Gets a list of crash groups and whether the list contains all
        /// available groups.
        /// </remarks>
        /// <param name='ownerName'>
        /// The name of the owner
        /// </param>
        /// <param name='appName'>
        /// The name of the application
        /// </param>
        /// <param name='lastOccurrenceFrom'>
        /// Earliest date when the last time a crash occured in a crash group
        /// </param>
        /// <param name='lastOccurrenceTo'>
        /// Latest date when the last time a crash occured in a crash group
        /// </param>
        /// <param name='appVersion'>
        /// version
        /// </param>
        /// <param name='groupType'>
        /// Possible values include: 'GroupType1', 'GroupType2'
        /// </param>
        /// <param name='groupStatus'>
        /// Possible values include: 'open', 'closed', 'ignored'
        /// </param>
        /// <param name='groupTextSearch'>
        /// A freetext search that matches in crash, crash types, crash
        /// stack_traces and crash user
        /// </param>
        /// <param name='orderby'>
        /// the OData-like $orderby argument. Possible values include:
        /// 'last_occurrence asc', 'last_occurrence desc', 'count asc', 'count
        /// desc', 'display_id asc', 'display_id desc', 'impacted_users asc',
        /// 'impacted_users desc'
        /// </param>
        /// <param name='continuationToken'>
        /// Cassandra request continuation token. The token is used for
        /// pagination.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="FailureException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<CrashGroupsContainer>> ListWithHttpMessagesAsync(string ownerName, string appName, System.DateTime? lastOccurrenceFrom = default(System.DateTime?), System.DateTime? lastOccurrenceTo = default(System.DateTime?), string appVersion = default(string), string groupType = default(string), string groupStatus = default(string), string groupTextSearch = default(string), string orderby = default(string), string continuationToken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
